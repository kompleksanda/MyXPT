XPTemplate priority=lang-2

XPT object
=======================================================
|Method|Detail|			*Objects_method_detail* *java.util.Objects_method_detail*

										*Objects.equals*
public static boolean equals( Object a, Object b)~
Returns true if the arguments are equal to each other
 and false otherwise.
 Consequently, if both arguments are null , true is returned and if exactly one argument is null , false is returned.  Otherwise, equality is determined by using
 the equals method of the first
 argument.
Parameters: a - an object b - an object to be compared with a for equality Returns: true if the arguments are equal to each other
 and false otherwise See Also: Object.equals(Object)

========================================
										*Objects.deepEquals*
public static boolean deepEquals( Object a, Object b)~
Returns true if the arguments are deeply equal to each other
 and false otherwise.

 Two null values are deeply equal.  If both arguments are
 arrays, the algorithm in Arrays.deepEquals is used to determine equality.
 Otherwise, equality is determined by using the equals method of the first argument.
Parameters: a - an object b - an object to be compared with a for deep equality Returns: true if the arguments are deeply equal to each other
 and false otherwise See Also: Arrays.deepEquals(Object[], Object[]) , equals(Object, Object)

========================================
										*Objects.hashCode*
public static int hashCode( Object o)~
Returns the hash code of a non- null argument and 0 for
 a null argument.
Parameters: o - an object Returns: the hash code of a non- null argument and 0 for
 a null argument See Also: Object.hashCode()

========================================
										*Objects.hash*
public static int hash( Object ... values)~
Generates a hash code for a sequence of input values. The hash
 code is generated as if all the input values were placed into an
 array, and that array were hashed by calling Arrays.hashCode(Object[]) . This method is useful for implementing Object.hashCode() on objects containing multiple fields. For
 example, if an object that has three fields, x , y , and z , one could write: @Override public int hashCode() {
     return Objects.hash(x, y, z);
 } Warning: When a single object reference is supplied, the returned
 value does not equal the hash code of that object reference. This
 value can be computed by calling hashCode(Object) .
Parameters: values - the values to be hashed Returns: a hash value of the sequence of input values See Also: Arrays.hashCode(Object[]) , List.hashCode()

========================================
										*Objects.toString*
public static String toString( Object o)~
Returns the result of calling toString for a non- null argument and "null" for a null argument.
Parameters: o - an object Returns: the result of calling toString for a non- null argument and "null" for a null argument See Also: Object.toString() , String.valueOf(Object)

========================================
public static String toString( Object o, String nullDefault)~
Returns the result of calling toString on the first
 argument if the first argument is not null and returns
 the second argument otherwise.
Parameters: o - an object nullDefault - string to return if the first argument is null Returns: the result of calling toString on the first
 argument if it is not null and the second argument
 otherwise. See Also: toString(Object)

========================================
										*Objects.compare*
public static <T> int compare(T a,                               T b, Comparator <? super T> c)~
Returns 0 if the arguments are identical and c.compare(a, b) otherwise.
 Consequently, if both arguments are null 0
 is returned. Note that if one of the arguments is null , a NullPointerException may or may not be thrown depending on
 what ordering policy, if any, the Comparator chooses to have for null values.
Type Parameters: T - the type of the objects being compared Parameters: a - an object b - an object to be compared with a c - the Comparator to compare the first two arguments Returns: 0 if the arguments are identical and c.compare(a, b) otherwise. See Also: Comparable , Comparator

========================================
public static <T> int compare(T a,                               T b, Comparator <? super T> c)~
Returns 0 if the arguments are identical and c.compare(a, b) otherwise.
 Consequently, if both arguments are null 0
 is returned. Note that if one of the arguments is null , a NullPointerException may or may not be thrown depending on
 what ordering policy, if any, the Comparator chooses to have for null values.
Type Parameters: T - the type of the objects being compared Parameters: a - an object b - an object to be compared with a c - the Comparator to compare the first two arguments Returns: 0 if the arguments are identical and c.compare(a, b) otherwise. See Also: Comparable , Comparator

========================================
										*Objects.requireNonNull*
public static <T> T requireNonNull(T obj)~
Checks that the specified object reference is not null . This
 method is designed primarily for doing parameter validation in methods
 and constructors, as demonstrated below: public Foo(Bar bar) {
     this.bar = Objects.requireNonNull(bar);
 }
Type Parameters: T - the type of the reference Parameters: obj - the object reference to check for nullity Returns: obj if not null Throws: NullPointerException - if obj is null

========================================
public static <T> T requireNonNull(T obj)~
Checks that the specified object reference is not null . This
 method is designed primarily for doing parameter validation in methods
 and constructors, as demonstrated below: public Foo(Bar bar) {
     this.bar = Objects.requireNonNull(bar);
 }
Type Parameters: T - the type of the reference Parameters: obj - the object reference to check for nullity Returns: obj if not null Throws: NullPointerException - if obj is null

========================================
public static <T> T requireNonNull(T obj, String message)~
Checks that the specified object reference is not null and
 throws a customized NullPointerException if it is. This method
 is designed primarily for doing parameter validation in methods and
 constructors with multiple parameters, as demonstrated below: public Foo(Bar bar, Baz baz) {
     this.bar = Objects.requireNonNull(bar, "bar must not be null");
     this.baz = Objects.requireNonNull(baz, "baz must not be null");
 }
Type Parameters: T - the type of the reference Parameters: obj - the object reference to check for nullity message - detail message to be used in the event that a NullPointerException is thrown Returns: obj if not null Throws: NullPointerException - if obj is null

========================================
public static <T> T requireNonNull(T obj, String message)~
Checks that the specified object reference is not null and
 throws a customized NullPointerException if it is. This method
 is designed primarily for doing parameter validation in methods and
 constructors with multiple parameters, as demonstrated below: public Foo(Bar bar, Baz baz) {
     this.bar = Objects.requireNonNull(bar, "bar must not be null");
     this.baz = Objects.requireNonNull(baz, "baz must not be null");
 }
Type Parameters: T - the type of the reference Parameters: obj - the object reference to check for nullity message - detail message to be used in the event that a NullPointerException is thrown Returns: obj if not null Throws: NullPointerException - if obj is null

========================================
										*Objects.isNull*
public static boolean isNull( Object obj)~
Returns true if the provided reference is null otherwise
 returns false .
API Note: This method exists to be used as a Predicate , filter(Objects::isNull) Parameters: obj - a reference to be checked against null Returns: true if the provided reference is null otherwise false Since: 1.8 See Also: Predicate

========================================
										*Objects.nonNull*
public static boolean nonNull( Object obj)~
Returns true if the provided reference is non- null otherwise returns false .
API Note: This method exists to be used as a Predicate , filter(Objects::nonNull) Parameters: obj - a reference to be checked against null Returns: true if the provided reference is non- null otherwise false Since: 1.8 See Also: Predicate

========================================
public static <T> T requireNonNull(T obj, Supplier < String > messageSupplier)~
Checks that the specified object reference is not null and
 throws a customized NullPointerException if it is. Unlike the method requireNonNull(Object, String) ,
 this method allows creation of the message to be deferred until
 after the null check is made. While this may confer a
 performance advantage in the non-null case, when deciding to
 call this method care should be taken that the costs of
 creating the message supplier are less than the cost of just
 creating the string message directly.
Type Parameters: T - the type of the reference Parameters: obj - the object reference to check for nullity messageSupplier - supplier of the detail message to be
 used in the event that a NullPointerException is thrown Returns: obj if not null Throws: NullPointerException - if obj is null Since: 1.8

========================================
public static <T> T requireNonNull(T obj, Supplier < String > messageSupplier)~
Checks that the specified object reference is not null and
 throws a customized NullPointerException if it is. Unlike the method requireNonNull(Object, String) ,
 this method allows creation of the message to be deferred until
 after the null check is made. While this may confer a
 performance advantage in the non-null case, when deciding to
 call this method care should be taken that the costs of
 creating the message supplier are less than the cost of just
 creating the string message directly.
Type Parameters: T - the type of the reference Parameters: obj - the object reference to check for nullity messageSupplier - supplier of the detail message to be
 used in the event that a NullPointerException is thrown Returns: obj if not null Throws: NullPointerException - if obj is null Since: 1.8


XPT Number alias=_chooseXSET
XSET $byteValue byte=byteValue\()
XSET $shortValue short=shortValue\()
XSET $intValue int=intValue\()
XSET $longValue long=longValue\()
XSET $floatValue float=floatValue\()
XSET $doubleValue double=doubleValue\()

XPT Comparable alias=_chooseXSET
XSET $compareTo int=compareTo\(`T o^)

XPT math alias=_chooseXSET
XSET $E return double, the base of the natural logarithms\.=E
XSET $PI return double=PI
XSET $sin return double\. Parameters: a - an angle, in radians\.=sign\(`double a^)
XSET $cos return double\. Parameters: a - an angle, in radians\.=cos\(`double a^)
XSET $tan return double Parameters: a - an angle, in radians\.=tan\(`double a^)
XSET $asin double\. Parameters: a - the value whose arc sine is to be returned\.=atan\(`double a^)
XSET $acos return double  Parameters: a - the value whose arc cosine is to be returned\.=acos\(`double a^)
XSET $atan return double\. the returned angle is in the range - pi /2 through pi /2\. Parameters: a - the value whose arc tangent is to be returned\.=atan\(`double a^)
XSET $toRadians return double Converts an angle measured in degrees to an approximately equivalent angle measured in radians\. Parameters: angdeg - an angle, in degrees=toRadians\(`double angdeg^)
XSET $toDegrees return double\. The conversion from radians to degrees is generally inexact; users should not expect cos(toRadians(90\.0)) to exactly equal 0\.0\. Parameters: angrad - an angle, in radians=toDegrees\(`double angrad^)
XSET $exp return double Parameters: a - the exponent to raise e to\.=exp\(`double a^)
XSET $log return double =log\(`double a^)
XSET $log10 return double =log10\(`double a^)
XSET $sqrt return double =sqrt\(`double a^)
XSET $cbrt return double\. For positive finite x , cbrt(-x) \=\= -cbrt(x)\.=cbrt\(`double a^)
XSET $IEEEremainder return double Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard\. If the remainder is zero, its sign is the same as the sign of the first argument\.Returns: the remainder when f1 is divided by f2\.=IEEEremainder\(`double f1^, `double f2^)
XSET $ceil return double\. Note Math\.ceil(x) \=\= -Math\.floor(-x)\.=ceil\(`double a^)
XSET $floor return double =floor\(`double a^)
XSET $rint Returns the double value that is closest in value to the argument and is equal to a mathematical integer\.=rint\(`double a^)
XSET $atan2 return double\. This method computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi\.Parameters: y - the ordinate coordinate x - the abscissa coordinate Returns: the theta component of the point(r , theta) in polar coordinates that corresponds to the point( x , y ) in Cartesian coordinates\.=atan2\(`double y^, `double x^)
XSET $pow return double Parameters: a - the base\. b - the exponent\.=pow\(`double a^, `double b^)
XSET $round return int/double\. If the argument is NaN, the result is 0\. Parameters: a - a floating-point\double value to be rounded to an integer\.=round\(`float/long a^)
XSET $random Returns a double value with a positive sign, greater than or equal to 0\.0 and less than 1\.0\. values are chosen pseudorandomly with (approximately) uniform distribution from that range\. See Also: Random\.nextDouble()=random\()
XSET $addExact return int/long Returns the sum of its arguments Throws: ArithmeticException - if the result overflows an int/long=addExact\(`int/long x^, `int/long y^)
XSET $subtractExact return int/long Returns the difference of the arguments Throws: ArithmeticException - if the result overflows an int/long=subtractExact\(`int/long x^, `int/long y^)
XSET $multiplyExact return int/long Returns the product of its arguments Throws: ArithmeticException - if the result overflows an int/long=multiplyExact\(`int/long x^, `int/long y^)
XSET $incrementExact return int/long the argument incremented by one\. Throws: ArithmeticException - if the result overflows an int/long=incrementExact\(^int/long a^)
XSET $decrementExact return int/long the argument decremented by one\. Throws: ArithmeticException - if the result overflows an int/long=decrementExact\(^int/long a^)
XSET $negateExact return int/long the negation of the argument\. Throws: ArithmeticException - if the result overflows an int/long=negateExact\(`int a^)
XSET $toIntExact return int the value of the long argument; Throws: ArithmeticException - if the argument overflows an int=toIntExact\(`long value^)
XSET $floorDiv return int/long\. For example, floorDiv(-4, 3) \=\= -2, whereas (-4 / 3) \=\= -1 \.=floorDiv\(`int/long x^, `int/long y^)
XSET $floorMod return int/long\. Returns the floor modulus of the int arguments\. The floor modulus is x - (floorDiv(x, y) * y), has the same sign as the divisor y , and is in the range of -abs(y) < r < +abs(y) \. The relationship between floorDiv and floorMod is such that: floorDiv(x, y) * y + floorMod(x, y) \=\= x\. Examples: If the signs of the arguments are the same, the result of floorMod and the % operator are the same\. floorMod(4, 3) \=\= 1 ;   and (4 % 3) \=\= 1 If the signs of the arguments are different, the results differ from the % operator\. floorMod(+4, -3) \=\= -2 ;   and (+4 % -3) \=\= +1 floorMod(-4, +3) \=\= +2 ;   and (-4 % +3) \=\= -1 floorMod(-4, -3) \=\= -1 ;   and (-4 % -3) \=\= -1 If the signs of arguments are unknown and a positive modulus is needed it can be computed as (floorMod(x, y) + abs(y)) % abs(y) \.=floorMod\(`int/long x^, `int/long y^)
XSET $abs return int/long/float/double\. Note that if the argument is equal to the value of Integer\.MIN_VALUE , the most negative representable int value, the result is that same value, which is negative\.=abs\(`int/long/float/double a^)
XSET $max return int/long/float/double=max\(`int/long/float/double a^, `int/long/float/double b^)
XSET $min return int/long/float/double=min\(`int/long/float/double a^, `int/long/float/double b^)
XSET $ulp return double/float the size of an ulp of the argument\.  An ulp, unit in the last place, of a double/float value is the positive distance between this floating-point value and the double value next larger in magnitude\.  Note that for non-NaN x , ulp(- x ) \=\= ulp( x )\. Parameters: d - the floating-point/double value whose ulp is to be returned=ulp\(`double/float d^)
XSET $signum return double/float Returns the signum function of the argument; zero if the argument is zero, 1\.0 if the argument is greater than zero, -1\.0 if the argument is less than zero\.=signum\(`double/float d^)
XSET $sinh return double\. The hyperbolic sine of x is defined to be( e x - e -x )/2 where e is Euler's number\.=sinh\(`double x^)
XSET $cosh return double\. The hyperbolic cosine of x is defined to be ( e x + e -x )/2 where e is Euler's number=cosh\(`double x^)
XSET $tanh return double tanh(double x)~ The hyperbolic tangent of x is defined to be ( e x - e -x )/( e x + e -x ), in other words, sinh( x ) / cosh( x )\. Note that the absolute value of the exact tanh is always less than 1\.=tanh\(`double x^)
XSET $hypot return double Returns sqrt( x 2 + y 2 ) without intermediate overflow or underflow\.=hypot\(`double x^, `double y^)
XSET $expm1 return double e x -1\.  Note that for values of x near 0, the exact sum of expm1(x) + 1 is much closer to the true result of e x than exp(x)\.=expm1\(`double x^)
XSET $log1p return double the natural logarithm of the sum of the argument and 1\. Note that for small values x , the result of log1p(x) is much closer to the true result of ln(1 + x ) than the floating-point evaluation of log(1\.0+x) \.=log1p\(`double x^)
XSET $copySign return double/float the first floating-point argument with the sign of the second floating-point argument\.  Note that unlike the StrictMath\.copySign method, this method does not require NaN sign arguments to be treated as positive values Parameters: magnitude - the parameter providing the magnitude of the result sign - the parameter providing the sign of the result=copySign\(`double/float magnitude^, `double/float sign^)
XSET $getExponent return intthe unbiased exponent used in the representation of a float\.=getExponent\(`float/double f^)
XSET $nextAfter return double/float the floating-point number adjacent to the first argument in the direction of the second argument\.  If both arguments compare as equal the second argument is returned\.=nextAfter\(`double/float start^, `double direction^)
XSET $nextUp return double/float the floating-point value adjacent to d in the direction of positive infinity\.  This method is semantically equivalent to nextAfter(d, Double\.POSITIVE_INFINITY) ; however, a nextUp implementation may run faster than its equivalent nextAfter call\.=nextUp\(`double/float d^)
XSET $nextDown return double/float the floating-point value adjacent to d in the direction of negative infinity\.  This method is semantically equivalent to nextAfter(d, Double\.NEGATIVE_INFINITY) ; however, a nextDown implementation may run faster than its equivalent nextAfter call\.=nextDown\(`double/float d^)
XSET $scalb return double/float Returns d × 2 scaleFactor rounded as if performed by a single correctly rounded floating-point multiply to a member of the double value set\. Parameters: d - number to be scaled by a power of two\. scaleFactor - power of 2 used to scale d Returns: d × 2 scaleFactor=scalb\(`double/float d^, `int scaleFactor^)

XPT int setting=Number|Comparable text=_chooseXSET
XSET $valueOf Integer valueOf(int i)=Integer.valueOf\(`int i^)
XSET $valueOf Integer valueOf(String s, int radix?)=Integer.valueOf\(`String s^`, `int radix?^)
XSET $Math\.=Math.Trigger("math")
XSET $MIN_VALUE int =Integer.MIN_VALUE
XSET $MAX_VALUE int =Integer.MAX_VALUE
XSET $TYPE Class < Integer > The Class instance representing the primitive type int \.=Integer.TYPE
XSET $SIZE int The number of bits used to represent an int value in two's complement binary form\.=Integer.SIZE
XSET $BYTES int The number of bytes used to represent a int value in two's complement binary form\.=Integer.BYTES
XSET $Integer Integer(int value)=Integer\(`int value^)
XSET $Integer Integer(String s) Throws: NumberFormatException - if the String does not contain a parsable integer\.=Integer\(`String s^)
XSET $toString String Integer.toString(int i, int radix?)=Integer.toString\(`int i^`, `int radix?^)
XSET $toString String=toString\()
XSET $toUnsignedString String =Integer.toUnsignedString\(`int i^`, `int radix?^)
XSET $toHexString String =Integer.toHexString\(`int i^)
XSET $toOctalString String =Integer.toOctalString\(`int i^)
XSET $toBinaryString String =Integer.toBinaryString\(`int i^)
XSET $parseInt int Parses the string argument as a signed integer in the radix specified by the second argument\.Throws: NumberFormatException - if the String does not contain a parsable int \.=Integer.parseInt\(`String s^`, `int radix?^)
XSET $parseUnsignedInt int =Integer.parseUnsignedInt\(`String s^`, `int radix?^)
XSET $hashCode int =hashCode\()
XSET $hashCode int Integer.hashCode(int value)=Integer.hashCode\(`int value^)
XSET $equals boolean=equals\(`Object obj^)
XSET $getInteger Integer Determines the integer value of the system property with the specified name\. The first argument is treated as the name of a system property\.The second argument is the default value\.=Integer.getInteger\(`String nm^`, `int val^)
XSET $compare int =Integer.compare\(`int x^, `int y^)
XSET $compareUnsigned int =Integer.compareUnsigned\(`int x^, `int y^)
XSET $toUnsignedLong long =Integer.toUnsignedLong\(`int x^)
XSET $divideUnsigned int Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value\.=Integer.divideUnsigned\(`int dividend^, `int divisor^)
XSET $remainderUnsigned int Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value\.=Integer.remainderUnsigned\(`int dividend^, `int divisor^)
XSET $highestOneBit int Returns an int value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified int value\.=Integer.highestOneBit\(`int i^)
XSET $lowestOneBit int Returns an int value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified int value\.=Integer.lowestOneBit\(`int i^)
XSET $numberOfLeadingZeros int Returns the number of zero bits preceding the highest-order ("leftmost") one-bit in the two's complement binary representation of the specified int value\.=Integer.numberOfLeadingZeros\(`int i^)
XSET $numberOfTrailingZeros int Returns the number of zero bits following the lowest-order ("rightmost") one-bit in the two's complement binary representation of the specified int value\.=Integer.numberOfTrailingZeros\(`int i^)
XSET $bitCount int Returns the number of one-bits in the two's complement binary representation of the specified int value\.=Integer.bitCount\(`int i^)
XSET $rotateLeft int Returns the value obtained by rotating the two's complement binary representation of the specified int value left by the specified number of bits\.=Integer.rotateLeft\(`int i^, `int distance^)
XSET $rotateRight int Returns the value obtained by rotating the two's complement binary representation of the specified int value right by the specified number of bits\.=Integer.rotateRight\(`int i^, `int distance^)
XSET $reverse int Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified int value\.=Integer.reverse\(`int i^)
XSET $signum int Returns the signum function of the specified int value\.=Integer.signum\(`int i^)
XSET $reverseBytes int Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified int value\.=Integer.reverseBytes\(`int i^)
XSET $sum int Adds two integers together as per the + operator\.=Integer.sum\(`int a^, `int b^)
XSET $max int Returns the greater of two int values as if by calling Math\.max \.=Integer.max\(`int a^, `int b^)
XSET $min int Returns the smaller of two int values as if by calling Math\.min \.=Integer.min\(`int a^, `int b^)

XPT char alias=Comparable
XSET $MIN_RADIX int\. The minimum radix available for conversion to and from strings\. The constant value of this field is the smallest value permitted for the radix argument in radix-conversion methods such as the digit method, the forDigit method, and the toString method of class Integer \.=Character.MIN_RADIX
XSET $MIN_VALUE char\. The constant value of this field is the smallest value of type char , '\u0000' \.=Character.MIN_VALUE
XSET $MAX_VALUE char\.The constant value of this field is the largest value of type char , '\uFFFF' \.=Character.MAX_VALUE
XSET $TYPE Class < Character >\. The Class instance representing the primitive type char \.=Character.TYPE
XSET $UNASSIGNED byte\. General category "Cn" in the Unicode specification\.=Character.UNASSIGNED
XSET $UPPERCASE_LETTER byte\. General category "Lu" in the Unicode specification\.=Character.UPPERCASE_LETTER
XSET $LOWERCASE_LETTER byte\. General category "Ll" in the Unicode specification\.=Character.LOWERCASE_LETTER
XSET $TITLECASE_LETTER byte\. General category "Lt" in the Unicode specification\.=Character.TITLECASE_LETTER
XSET $MODIFIER_LETTER byte\. General category "Lm" in the Unicode specification\.=Character.MODIFIER_LETTER
XSET $OTHER_LETTER byte\. General category "Lo" in the Unicode specification\.=Character.OTHER_LETTER
XSET $NON_SPACING_MARK byte\. General category "Mn" in the Unicode specification\.=Character.NON_SPACING_MARK
XSET $ENCLOSING_MARK byte\. General category "Me" in the Unicode specification\.=Character.ENCLOSING_MARK
XSET $COMBINING_SPACING_MARK byte\. General category "Mc" in the Unicode specification\.=Character.COMBINING_SPACING_MARK
XSET $DECIMAL_DIGIT_NUMBER byte\. General category "Nd" in the Unicode specification\.=Character.DECIMAL_DIGIT_NUMBER
XSET $LETTER_NUMBER byte\. General category "Nl" in the Unicode specification\.=Character.LETTER_NUMBER
XSET $OTHER_NUMBER byte\. General category "No" in the Unicode specification\.=Character.OTHER_NUMBER
XSET $SPACE_SEPARATOR byte\. General category "Zs" in the Unicode specification\.=Character.SPACE_SEPARATOR
XSET $LINE_SEPARATOR byte\. General category "Zl" in the Unicode specification\.=Character.LINE_SEPARATOR
XSET $PARAGRAPH_SEPARATOR byte\. General category "Zp" in the Unicode specification\.=Character.PARAGRAPH_SEPARATOR
XSET $CONTROL byte\. General category "Cc" in the Unicode specification\.=Character.CONTROL
XSET $FORMAT byte\. General category "Cf" in the Unicode specification\.=Character.FORMAT
XSET $PRIVATE_USE byte\. General category "Co" in the Unicode specification\.=Character.PRIVATE_USE
XSET $SURROGATE byte\. General category "Cs" in the Unicode specification\.=Character.SURROGATE
XSET $DASH_PUNCTUATION byte\. General category "Pd" in the Unicode specification\.=Character.DASH_PUNCTUATION
XSET $START_PUNCTUATION byte\. General category "Ps" in the Unicode specification\.=Character.START_PUNCTUATION
XSET $END_PUNCTUATION byte\. General category "Pe" in the Unicode specification\.=Character.END_PUNCTUATION
XSET $CONNECTOR_PUNCTUATION byte\. General category "Pc" in the Unicode specification\.=Character.CONNECTOR_PUNCTUATION
XSET $OTHER_PUNCTUATION byte\. General category "Po" in the Unicode specification\.=Character.OTHER_PUNCTUATION
XSET $MATH_SYMBOL byte\. General category "Sm" in the Unicode specification\.=Character.MATH_SYMBOL
XSET $CURRENCY_SYMBOL byte\. General category "Sc" in the Unicode specification\.=Character.CURRENCY_SYMBOL
XSET $MODIFIER_SYMBOL byte\. General category "Sk" in the Unicode specification\.=Character.MODIFIER_SYMBOL
XSET $OTHER_SYMBOL byte\. General category "So" in the Unicode specification\.=Character.OTHER_SYMBOL
XSET $INITIAL_QUOTE_PUNCTUATION byte\. General category "Pi" in the Unicode specification\.=Character.INITIAL_QUOTE_PUNCTUATION
XSET $FINAL_QUOTE_PUNCTUATION byte\. General category "Pf" in the Unicode specification\.=Character.FINAL_QUOTE_PUNCTUATION
XSET $DIRECTIONALITY_UNDEFINED byte\. Undefined bidirectional character type\. Undefined char values have undefined directionality in the Unicode specification\.=Character.DIRECTIONALITY_UNDEFINED
XSET $DIRECTIONALITY_LEFT_TO_RIGHT byte\. Strong bidirectional character type "L" in the Unicode specification\.=Character.DIRECTIONALITY_LEFT_TO_RIGHT
XSET $DIRECTIONALITY_RIGHT_TO_LEFT byte\. Strong bidirectional character type "R" in the Unicode specification\.=Character.DIRECTIONALITY_RIGHT_TO_LEFT
XSET $DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC byte\. Strong bidirectional character type "AL" in the Unicode specification\.=Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC
XSET $DIRECTIONALITY_EUROPEAN_NUMBER byte\. Weak bidirectional character type "EN" in the Unicode specification\.=Character.DIRECTIONALITY_EUROPEAN_NUMBER
XSET $DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR byte\. Weak bidirectional character type "ES" in the Unicode specification\.=Character.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR
XSET $DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR byte\. Weak bidirectional character type "ET" in the Unicode specification\.=Character.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR
XSET $DIRECTIONALITY_ARABIC_NUMBER byte\. Weak bidirectional character type "AN" in the Unicode specification\.=Character.DIRECTIONALITY_ARABIC_NUMBER
XSET $DIRECTIONALITY_COMMON_NUMBER_SEPARATOR byte\. Weak bidirectional character type "CS" in the Unicode specification\.=Character.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR
XSET $DIRECTIONALITY_NONSPACING_MARK byte\. Weak bidirectional character type "NSM" in the Unicode specification\.=Character.DIRECTIONALITY_NONSPACING_MARK
XSET $DIRECTIONALITY_BOUNDARY_NEUTRAL byte\. Weak bidirectional character type "BN" in the Unicode specification\.=Character.DIRECTIONALITY_BOUNDARY_NEUTRAL
XSET $DIRECTIONALITY_PARAGRAPH_SEPARATOR byte\. Neutral bidirectional character type "B" in the Unicode specification\.=Character.DIRECTIONALITY_PARAGRAPH_SEPARATOR
XSET $DIRECTIONALITY_SEGMENT_SEPARATOR byte\. Neutral bidirectional character type "S" in the Unicode specification\.=Character.DIRECTIONALITY_SEGMENT_SEPARATOR
XSET $DIRECTIONALITY_WHITESPACE byte\. Neutral bidirectional character type "WS" in the Unicode specification\.=Character.DIRECTIONALITY_WHITESPACE
XSET $DIRECTIONALITY_OTHER_NEUTRALS byte\. Neutral bidirectional character type "ON" in the Unicode specification\.=Character.DIRECTIONALITY_OTHER_NEUTRALS
XSET $DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING byte\. Strong bidirectional character type "LRE" in the Unicode specification\.=Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING
XSET $DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE byte\. Strong bidirectional character type "LRO" in the Unicode specification\.=Character.DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE
XSET $DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING byte\. Strong bidirectional character type "RLE" in the Unicode specification\.=Character.DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING
XSET $DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE byte\. Strong bidirectional character type "RLO" in the Unicode specification\.=Character.DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE
XSET $DIRECTIONALITY_POP_DIRECTIONAL_FORMAT byte\. Weak bidirectional character type "PDF" in the Unicode specification\.=Character.DIRECTIONALITY_POP_DIRECTIONAL_FORMAT
XSET $MIN_HIGH_SURROGATE char\. The minimum value of a Unicode high-surrogate code unit in the UTF-16 encoding, constant '\uD800' \. A high-surrogate is also known as a leading-surrogate \.=Character.MIN_HIGH_SURROGATE
XSET $MAX_HIGH_SURROGATE char\. The maximum value of a Unicode high-surrogate code unit in the UTF-16 encoding, constant '\uDBFF' \. A high-surrogate is also known as a leading-surrogate \.=Character.MAX_HIGH_SURROGATE
XSET $MIN_LOW_SURROGATE char\. The minimum value of a Unicode low-surrogate code unit in the UTF-16 encoding, constant '\uDC00' \. A low-surrogate is also known as a trailing-surrogate \.=Character.MIN_LOW_SURROGATE
XSET $MAX_LOW_SURROGATE char\. The maximum value of a Unicode low-surrogate code unit in the UTF-16 encoding, constant '\uDFFF' \. A low-surrogate is also known as a trailing-surrogate \.=Character.MAX_LOW_SURROGATE
XSET $MIN_SURROGATE char\. The minimum value of a Unicode surrogate code unit in the UTF-16 encoding, constant '\uD800' \.=Character.MIN_SURROGATE
XSET $MAX_SURROGATE char\. The maximum value of a Unicode surrogate code unit in the UTF-16 encoding, constant '\uDFFF' \.=Character.MAX_SURROGATE
XSET $MIN_SUPPLEMENTARY_CODE_POINT int\. The minimum value of a Unicode supplementary code point , constant U+10000 \.=Character.MIN_SUPPLEMENTARY_CODE_POINT
XSET $MIN_CODE_POINT int\. The minimum value of a Unicode code point , constant U+0000 \.=Character.MIN_CODE_POINT
XSET $MAX_CODE_POINT int\. The maximum value of a Unicode code point , constant U+10FFFF \.=Character.MAX_CODE_POINT
XSET $SIZE int\. The number of bits used to represent a char value in unsigned binary form, constant 16 \.=Character.SIZE
XSET $BYTES int\. The number of bytes used to represent a char value in unsigned binary form\.=Character.BYTES
XSET $valueOf Character\. Returns a Character instance representing the specified char value\. If a new Character instance is not required, this method should generally be used in preference to the constructor Character(char) , as this method is likely to yield significantly better space and time performance by caching frequently requested values\.=Character.valueOf\(`char c^)
XSET $charValue char the the primitive char value represented by this object\.=charValue\()
XSET $hashCode int hashCode()=hashCode\()
XSET $hashCode int Character.hashCode(char value)=Character.hashCode\(`char value^)
XSET $equals boolean=equals\(`Object obj^)
XSET $toString String =toString\()
XSET $toString String Character.toString(char c)=Character.toString\(`char c^)
XSET $isValidCodePoint boolean Determines whether the specified code point is a valid Unicode code point value\.=Character.isValidCodePoint\(`int codePoint^)
XSET $isBmpCodePoint boolean Determines whether the specified character (Unicode code point) is in the Basic Multilingual Plane (BMP)=Character.isBmpCodePoint\(`int codePoint^)
XSET $isSupplementaryCodePoint boolean Determines whether the specified character (Unicode code point) is in the supplementary character range\.=Character.isSupplementaryCodePoint\(`int codePoint^)
XSET $isHighSurrogate boolean Determines if the given char value is a Unicode high-surrogate code unit (also known as leading-surrogate code unit )\. Such values do not represent characters by themselves, but are used in the representation of supplementary characters in the UTF-16 encoding\.=Character.isHighSurrogate\(`char ch^)
XSET $isLowSurrogate boolean Determines if the given char value is a Unicode low-surrogate code unit (also known as trailing-surrogate code unit )\. Such values do not represent characters by themselves, but are used in the representation of supplementary characters in the UTF-16 encoding\.=Character.isLowSurrogate\(`char ch^)
XSET $isSurrogate boolean Determines if the given char value is a Unicode surrogate code unit \. Such values do not represent characters by themselves, but are used in the representation of supplementary characters in the UTF-16 encoding\.=Character.isSurrogate\(`char ch^)
XSET $isSurrogatePair boolean Determines whether the specified pair of char values is a valid Unicode surrogate pair \.=Character.isSurrogatePair\(`char high^, `char low^)
XSET $charCount int =Character.charCount\(`int codePoint^)
XSET $toCodePoint int =Character.toCodePoint\(`char high^, `char low^)
XSET $codePointAt int Returns the code point at the given index of the CharSequence=Character.codePointAt\(`CharSequence/char[] seq^, `int index^)
XSET $codePointAt int Returns the code point at the given index of the char array, where only array elements with index less than limit can be used\.=Character.codePointAt\(`char[] a^, `int index^, `int limit^)
XSET $codePointBefore int Returns the code point preceding the given index of the CharSequence/char[]=Character.codePointBefore\(`CharSequence/char[] seq^, `int index^)
XSET $codePointBefore int Returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used\.=Character.codePointBefore\(`char[] a^, `int index^, `int start^)
XSET $highSurrogate char Returns the leading surrogate (a high surrogate code unit ) of the surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding\.=Character.highSurrogate\(`int codePoint^)
XSET $lowSurrogate char Returns the trailing surrogate (a low surrogate code unit ) of the surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding\.=Character.lowSurrogate\(`int codePoint^)
XSET $toChars int Converts the specified character (Unicode code point) to its UTF-16 representation\. If the specified code point is a BMP (Basic Multilingual Plane or Plane 0) value, the same value is stored in dst[dstIndex] , and 1 is returned\. If the specified code point is a supplementary character, its surrogate values are stored in dst[dstIndex] (high-surrogate) and dst[dstIndex+1] (low-surrogate), and 2 is returned\.=Character.toChars\(`int codePoint^, `char[] dst^, `int dstIndex^)
XSET $toChars char[] Converts the specified character (Unicode code point) to its UTF-16 representation stored in a char array\.=Character.toChars\(int codePoint)
XSET $codePointCount int\. Returns the number of Unicode code points in the text range of the specified char sequence or subarray of the char array argument=Character.codePointCount\(`CharSequence/char[] seq^, `int beginIndex/offset^, `int endIndex/count^)
XSET $offsetByCodePoints int\. Returns the index within the given char sequence or subarray of the char array argument=Character.offsetByCodePoints\(`CharSequence/char[] seq^, `int beginIndex/offset^, `int endIndex/count^)
XSET $isLowerCase boolean=Character.isLowerCase\(`char/int ch/codePoint^)
XSET $isUpperCase boolean=Character.isUpperCase\(`char/int ch/codePoint^)
XSET $isTitleCase boolean=Character.isTitleCase\(`char/int ch/codePoint^)
XSET $isDigit boolean=Character.isDigit\(`char/int ch/codePoint^)
XSET $isDefined boolean\. Determines if a character is defined in Unicode\.=Character.isDefined\(`char/int ch/codePoint^)
XSET $isLetter boolean=Character.isLetter\(`char/int ch/codePoint^)
XSET $isLetterOrDigit boolean=Character.isLetterOrDigit\(`char/int ch/codePoint^)
XSET $isJavaIdentifierStart boolean\. Determines if the specified character is permissible as the first character in a Java identifier=Character.isJavaIdentifierStart\(`char/int ch/codePoint^)
XSET $isJavaIdentifierPart boolean\. Determines if the specified character may be part of a Java identifier as other than the first character\.=Character.isJavaIdentifierPart\(`char/int ch/codePoint^)
XSET $isAlphabetic boolean=Character.isAlphabetic\(`int codePoint^)
XSET $isIdeographic boolean\. Determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard\.=Character.isIdeographic\(`int codePoint^)
XSET $isUnicodeIdentifierStart boolean\. Determines if the specified character is permissible as the first character in a Unicode identifier\.=Character.isUnicodeIdentifierStart\(`char/int ch/codePoint^)
XSET $isUnicodeIdentifierPart boolean\. Determines if the specified character may be part of a Unicode identifier as other than the first character\.=Character.isUnicodeIdentifierPart\(`char/int ch/codePoint^)
XSET $isIdentifierIgnorable boolean\. Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier\.=Character.isIdentifierIgnorable\(`char/int ch/codePoint^)
XSET $toLowerCase char/int=Character.toLowerCase\(`char/int ch/codePoint^)
XSET $toTitleCase char/int=Character.toTitleCase\(`char/int ch/codePoint^)
XSET $digit int\. Returns the numeric value of the character ch or Unicode code point in the specified radix\.=Character.digit\(`char/int ch/codePoint^, `int radix^)
XSET $getNumericValue int\.Returns the int value that the specified Unicode character or point represents\.=Character.getNumericValue\(`char/int ch/codePoint^)
XSET $isSpaceChar boolean=Character.isSpaceChar\(`char/int ch/codePoint^)
XSET $isWhitespace boolean=Character.isWhitespace\(`char/int ch/codePoint^)
XSET $isISOControl boolean=Character.isISOControl\(`char/int ch/codePoint^)
XSET $getType int\. Returns a value indicating a character's general category\. Note: This method cannot handle supplementary characters\.=Character.getType\(`char/int ch/codePoint^)
XSET $forDigit char\. Determines the character representation for a specific digit in the specified radix\.=Character.forDigit\(`int digit^, `int radix^)
XSET $getDirectionality byte\. Returns the Unicode directionality property for the given character\.=Character.getDirectionality\(`char/int ch/codePoint^)
XSET $isMirrored boolean\. Determines whether the character is mirrored according to the Unicode specification\.  Mirrored characters should have their glyphs horizontally mirrored when displayed in text that is right-to-left\.=Character.isMirrored\(`char/int ch/codePoint^)
XSET $compare int Character.compare()=Character.compare\(`char x^, `char y^)
XSET $reverseBytes char\. Returns the value obtained by reversing the order of the bytes in the specified char value\.=Character.reverseBytes\(`char ch^)
XSET $getName String\. Returns the Unicode name of the specified character codePoint , or null if the code point is unassigned \.=Character.getName\(`int codePoint^)

XPT CharSequence alias=_chooseXSET
XSET $length int=length\()
XSET $charAt char\. Returns the char value at the specified index\.=charAt\(`int index^)
XSET $subSequence CharSequence Returns a character sequence that is a subsequence of this sequence\.=subSequence\(`int beginIndex^, `int endIndex^)
XSET $toString String This object (which is already a string!) is itself returned\.=toString\()
XSET $chars IntStream Returns a stream of int zero-extending the char values from this sequence\.=chars\()
XSET $codePoints IntStream Returns a stream of code point values from this sequence\.=codePoints\()

XPT str setting=Comparable|CharSequence text=_chooseXSET
XSET $CASE_INSENSITIVE_ORDER A Comparator that orders String objects as by compareToIgnoreCase\. Comparator <String>=String.CASE_INSENSITIVE_ORDER
XSET $String String(char[] value)=String\(`char[] value^)
XSET $String String(char[] value, int offset, int count)=String\(`char[] value^, `int offset^, `int count^)
XSET $String String(int[] codePoints, int offset, int count)=String\(`int[] codePoints^, `int offset^, `int count^)
XSET $String String(byte[] bytes, int offset, int length, String/Charset charsetName) Constructs a new String by decoding the specified subarray of bytes using the specified charset\.=String\(`byte[] bytes^, `int offset^, `int length^, `String/Charset charsetName/charset^)
XSET $String String(byte[] bytes, String/Charset charsetName) Constructs a new String by decoding the specified array of bytes using the specified charset \.=String\(`byte[] bytes^, `String/Charset charsetName/charset^)
XSET $String String(byte[] bytes, int offset, int length)Constructs a new String by decoding the specified subarray of bytes using the platform's default charset\.=String\(`byte[] bytes^, `int offset^, `int length^)
XSET $String String(byte[] bytes)Constructs a new String by decoding the specified array of bytes using the platform's default charset\.=String\(`byte[]^ `bytes^)
XSET $String String( StringBuffer buffer)Allocates a new string that contains the sequence of characters currently contained in the string buffer argument\.=String\(`StringBuffer buffer^)
XSET $String String( StringBuilder builder)Allocates a new string that contains the sequence of characters currently contained in the string builder argument\.=String\(`StringBuilder builder^)
XSET $codePointAt int\. Returns the character (Unicode code point) at the specified index\.=codePointAt\(`int index^)
XSET $codePointBefore int Returns the character (Unicode code point) before the specified index\.=codePointBefore\(`int index^)
XSET $codePointCount int Returns the number of Unicode code points in the specified text range of this String\.=codePointCount\(`int beginIndex^, `int endIndex^)
XSET $offsetByCodePoints int\. Returns the index within this String that is offset from the given index by codePointOffset code points\.=offsetByCodePoints\(`int index^, `int codePointOffset^)
XSET $getChars void\. Copies characters from this string into the destination character array using specified indices\.=getChars\(`int srcBegin^, `int srcEnd^, `char[] dst^, `int dstBegin^)
XSET $getBytes byte[] getBytes(String/Charset charsetName/charset) Encodes this String into a sequence of bytes using the named charset=getBytes\(`String/Charset charsetName/charset^)
XSET $getBytes byte[] getBytes() Encodes this String into a sequence of bytes using the platform's default charset, storing the result into a new byte array\.=getBytes\()
XSET $equals boolean =equals\(`Object anObject^)
XSET $contentEquals boolean Compares this string to the specified StringBuffer/CharSequence=contentEquals\(`StringBuffer sb^)
XSET $equalsIgnoreCase boolean Compares this String to another String , ignoring case considerations\.=equalsIgnoreCase\(`String anotherString^)
XSET $compareToIgnoreCase int Compares two strings lexicographically, ignoring case differences\.=compareToIgnoreCase\(`String str^)
XSET $regionMatches boolean\. Tests if two string regions are equal\.=regionMatches\(``boolean ignoreCase?`, ^`int toffset^, `String other^, `int ooffset^, `int len^)
XSET $startsWith boolean=startsWith\(`String prefix^`, `int toffset?^)
XSET $endsWith boolean=endsWith\(`String suffix^)
XSET $hashCode int Returns a hash code for this string\.=hashCode\()
XSET $indexOf int Returns the index within this string of the first occurrence of the specified character\.=indexOf\(`int ch^`, `int fromIndex^)
XSET $indexOf int Returns the index within this string of the first occurrence of the specified substring\.=indexOf\(`String str^`, `int fromIndex^)
XSET $lastIndexOf int Returns the index within this string of the last occurrence of the specified character\.=lastIndexOf\(`int ch^`, `int fromIndex^)
XSET $lastIndexOf int Returns the index within this string of the first occurrence of the specified substring\.=lastIndexOf\(`String str^`, `int fromIndex^)
XSET $substring String=substring\(`int beginIndex^`, `int endIndex?^)
XSET $concat String=concat\(`String str^)
XSET $replace String=replace\(`char/CharSequence oldChar^, `char/CharSequence newChar^)
XSET $matches boolean Tells whether or not this string matches the given regular expression\.=matches\(`String regex^)
XSET $contains boolean Returns true if and only if this string contains the specified sequence of char values\.=contains\(`CharSequence s^)~
XSET $replaceFirst String Replaces the first substring of this string that matches the given regular expression with the given replacement\.=replaceFirst\(`String regex^, `String replacement^)
XSET $replaceAll String Replaces each substring of this string that matches the given regular expression with the given replacement\.=replaceAll\(`String regex^, `String replacement^)
XSET $split String [] Splits this string around matches of the given regular expression \.=split\(`String regex^`, `int limit?^)
XSET $join String =String.join\(`CharSequence delimiter^, `CharSequence\.\.\./Iterable<? extends CharSequence> elements^)
XSET $toLowerCase String Converts all of the characters in this String to lower case using the rules of the given Locale or default Locale if not given\.=toLowerCase\(`Locale locale?^)
XSET $toUpperCase String Converts all of the characters in this String to upper case using the rules of the given Locale or default Locale if not given\.=toUpperCase\(`Locale locale?^)
XSET $trim String Returns a string whose value is this string, with any leading and trailing whitespace removed\.=trim\()
XSET $toCharArray char[] Converts this string to a new character array\.=toCharArray\()
XSET $format String =String.format\(``Locale l?`, ^`String format^, `Object \.\.\. args^)
XSET $valueOf String=String.valueOf\(`Object obj^)
XSET $valueOf String Returns the string representation of a specific subarray of the char array argument\.=String.valueOf\(`char[] data^, `int offset^, `int count^)
XSET $copyValueOf String Equivalent to valueOf(char[], int, int)\.=String.copyValueOf\(`char[] data^, `int offset^, `int count^)
XSET $copyValueOf String Equivalent to valueOf(char[])=copyValueOf\(`char[] data^)
XSET $intern String Returns a canonical representation for the string object\.=intern\()

XPT array alias=_chooseXSET
XSET $sort void\. sorts the specified array into ascending numerical order\.=Arrays.sort\(`int/long/char/short/byte/float/double[] a^)
XSET $sort void\. Sorts the specified range of the array into ascending order\.=Arrays.sort\(`int/long/char/short/byte/float/double[] a^, `int fromIndex^, `int toIndex^)
XSET $parallelSort void\. Sorts the specified array into ascending numerical order\.=Arrays.parallelSort\(`int/long/char/short/byte/float/double[] a^)
XSET $parallelSort void\. Sorts the specified range of the array into ascending numerical order\.=Arrays.parallelSort\(`int/long/char/short/byte/float/double[] a^, `int fromIndex^, `int toIndex^)
XSET $parallelSort Sorts the specified array of objects into ascending order, according to the natural ordering of its elements\. All elements in the array must implement the Comparable interface\.<T extends Comparable <? super T>> void=Arrays.parallelSort\(T[] a)
XSET $parallelSort <T extends Comparable <? super T>> void Sorts the specified range of the specified array of objects into ascending order, according to the natural ordering of its elements\.=Arrays.parallelSort\(`T[] a^, `int fromIndex^, `int toIndex^)
XSET $parallelSort <T> void Sorts the specified array of objects according to the order induced by the specified comparator\.  All elements in the array must be mutually comparable by the specified comparator=Arrays.parallelSort\(`T[] a^, `Comparator <? super T> cmp^)
XSET $parallelSort <T> void Sorts the specified range of the specified array of objects according to the order induced by the specified comparator\.=Arrays.parallelSort\(`T[] a^, `int fromIndex^, `int toIndex^, `Comparator <? super T> cmp^)
XSET $sort <T> void Sorts the specified array of objects according to the order induced by the specified comparator\.  All elements in the array must be mutually comparable by the specified comparator=Arrays.sort\(`T[] a^, `Comparator <? super T> cmp^)
XSET $sort <T> void Sorts the specified range of the specified array of objects according to the order induced by the specified comparator\.=Arrays.sort\(`T[] a^, `int fromIndex^, `int toIndex^, `Comparator <? super T> cmp^)
XSET $parallelPrefix void Cumulates, in parallel, each element of the given array in place, using the supplied function\. For example if the array initially holds [2, 1, 0, 3] and the operation performs addition, then upon return the array holds [2, 3, 3, 6] \.=Arrays.parallelPrefix\(`T[] array^, `BinaryOperator <T> op^)
XSET $parallelPrefix <T> void Performs parallelPrefix(Object[], BinaryOperator) for the given subrange of the array\.=Arrays.parallelPrefix\(`T[] array^, `int fromIndex^, `int toIndex^, `BinaryOperator <T> op^)
XSET $binarySearch int Searches a range OR the specified array of longs for the specified value using the binary search algorithm\.  The array must be sorted (as by the sort(long[]) method) prior to making this call\.  If it is not sorted, the results are undefined\.=Arrays.binarySearch\(`object[] a^`, `int fromIndex?^`, `int toIndex?^, `object key^)
XSET $binarySearch <T> int Searches a range OR the specified array for the specified object using the binary search algorithm\.  The array must be sorted into ascending order according to the specified comparator=Arrays.binarySearch\(`T[] a^`, `int fromIndex^`, `int toIndex^, `T key, Comparator <? super T> c^)
XSET $equals boolean=Arrays.equals\(`object[] a^, `object[] a2^)
XSET $fill void Assigns the specified object value to each element of the specified range OR array of object\.=Arrays.fill\(`object[] a^`, `int fromIndex^`, `int toIndex^, `object val^)
XSET $copyOf <T> T[] Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length=Arrays.copyOf\(`U[] original^, `int newLength^)
XSET $copyOf <T,U> T[] Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length and type\.=Arrays.copyOf\(`U[] original^, `int newLength^, `Class <? extends T[]> newType^)
XSET $copyOfRange <T> T[] Copies the specified range of the specified array into a new array\.=Arrays.copyOfRange\(`T[] original^, `int from^, `int to^)
XSET $copyOfRange <T,U> T[] Copies the specified range of the specified array into a new array with new type\.=Arrays.copyOfRange\(`U[] original^, `int from^, `int to^, , `Class <? extends T[]> newType^)
XSET $asList @SafeVarargs <T> List <T> Returns a fixed-size list backed by the specified array\.  (Changes to the returned list "write through" to the array\.)=Arrays.asList\(`T... a^)
XSET $hashCode int =Arrays.hashCode\(`object[] a^)
XSET $deepHashCode int Returns a hash code based on the "deep contents" of the specified array\.  If the array contains other arrays as elements, the hash code is based on their contents and so on, ad infinitum\.=Arrays.deepHashCode\(`Object [] a^)
XSET $deepEquals boolean Returns true if the two specified arrays are deeply equal to one another\.  Unlike the equals(Object[],Object[]) method, this method is appropriate for use with nested arrays of arbitrary depth\.=Arrays.deepEquals\(`Object [] a1^, `Object [] a2^)
XSET $toString String =Arrays.toString\(`object[] a^)
XSET $deepToString String Returns a string representation of the "deep contents" of the specified array\.  If the array contains other arrays as elements, the string representation contains their contents and so on\.  This method is designed for converting multidimensional arrays to strings\.=Arrays.deepToString\(`Object [] a^)
XSET $setAll <T> void Set all elements of the specified array, using the provided generator function to compute each element\. If the generator function throws an exception, it is relayed to the caller and the array is left in an indeterminate state\.=Arrays.setAll\(`T[] array^, `IntFunction <? extends T> generator^)
XSET $parallelSetAll <T> void Set all elements of the specified array, in parallel, using the provided generator function to compute each element\. If the generator function throws an exception, it is relayed to the caller and the array is left in an indeterminate state\.=Arrays.parallelSetAll\(`T[] array^, `IntFunction <? extends T> generator^)
XSET $spliterator <T> Spliterator Returns a Spliterator covering range OR all of the specified array\. The spliterator reports Spliterator\.SIZED , Spliterator\.SUBSIZED , Spliterator\.ORDERED , and Spliterator\.IMMUTABLE \.=Arrays.spliterator\(`T[] array^`, `int startInclusive?^`, `int endExclusive?^)
XSET $stream <T> Stream Returns a sequential Stream with the specified array OR range as its source\.=Arrays.stream\(`T[] array^`, `int startInclusive^`, `int endExclusive^)
XSET $length=length

XPT cal setting=Comparable text=_chooseXSET
XSET $ERA int Field number for get and set indicating the era, e\.g\., AD or BC in the Julian calendar\.=Calendar.ERA
XSET $YEAR int Field number for get and set indicating the year\.=Calendar.YEAR
XSET $MONTH int Field number for get and set indicating the month\.=Calendar.MONTH
XSET $WEEK_OF_YEAR int Field number for get and set indicating the week number within the current year\.=Calendar.WEEK_OF_YEAR
XSET $WEEK_OF_MONTH int Field number for get and set indicating the week number within the current month\.=Calendar.WEEK_OF_MONTH
XSET $DATE int Field number for get and set indicating the day of the month\.This is a synonym for DAY_OF_MONTH \. The first day of the month has value 1\.=Calendar.DATE
XSET $DAY_OF_MONTH int same as Calendar.DATE=Calendar.DAY_OF_MONTH
XSET $DAY_OF_YEAR int Field number for get and set indicating the day number within the current year\.=Calendar.DAY_OF_YEAR
XSET $DAY_OF_WEEK int Field number for get and set indicating the day of the week\.=Calendar.DAY_OF_WEEK
XSET $DAY_OF_WEEK_IN_MONTH int Field number for get and set indicating the ordinal number of the day of the week within the current month\. Together with the DAY_OF_WEEK field, this uniquely specifies a day within a month\.=Calendar.DAY_OF_WEEK_IN_MONTH
XSET $AM_PM int Field number for get and set indicating whether the HOUR is before or after noon\.=Calendar.AM_PM
XSET $HOUR int Field number for get and set indicating the hour of the morning or afternoon\.=Calendar.HOUR
XSET $HOUR_OF_DAY int Field number for get and set indicating the hour of the day\. HOUR_OF_DAY is used for the 24-hour clock\.=Calendar.HOUR_OF_DAY
XSET $MINUTE int Field number for get and set indicating the minute within the hour\.=Calendar.MINUTE
XSET $SECOND int Field number for get and set indicating the second within the minute\.=Calendar.SECOND
XSET $MILLISECOND int Field number for get and set indicating the
XSET $ZONE_OFFSET int Field number for get and set indicating the raw offset from GMT in milliseconds\.=Calendar.ZONE_OFFSET
XSET $DST_OFFSET int Field number for get and set indicating the daylight saving offset in milliseconds\.=Calendar.DST_OFFSET
XSET $FIELD_COUNT int The number of distinct fields recognized by get and set \. Field numbers range from 0\.\.FIELD_COUNT-1 \.=Calendar.FIELD_COUNT
XSET $SUNDAY int Value of the DAY_OF_WEEK field indicating Sunday\.=Calendar.SUNDAY
XSET $MONDAY int Value of the DAY_OF_WEEK field indicating Monday\.=Calendar.MONDAY
XSET $TUESDAY int Value of the DAY_OF_WEEK field indicating Tuesday\.=Calendar.TUESDAY
XSET $WEDNESDAY int Value of the DAY_OF_WEEK field indicating Wednesday\.=Calendar.WEDNESDAY
XSET $THURSDAY int Value of the DAY_OF_WEEK field indicating Thursday\.=Calendar.THURSDAY
XSET $FRIDAY int Value of the DAY_OF_WEEK field indicating Friday\.=Calendar.FRIDAY
XSET $SATURDAY int Value of the DAY_OF_WEEK field indicating Saturday\.=Calendar.SATURDAY
XSET $JANUARY int =Calendar.JANUARY
XSET $FEBRUARY int =Calendar.FEBRUARY
XSET $MARCH int =Calendar.MARCH
XSET $APRIL int =Calendar.APRIL
XSET $MAY int =Calendar.MAY
XSET $JUNE int =Calendar.JUNE
XSET $JULY int =Calendar.JULY
XSET $AUGUST int =Calendar.AUGUST
XSET $SEPTEMBER int =Calendar.SEPTEMBER
XSET $OCTOBER int =Calendar.OCTOBER
XSET $NOVEMBER int =Calendar.NOVEMBER
XSET $DECEMBER int =Calendar.DECEMBER
XSET $UNDECIMBER int Value of the MONTH field indicating the thirteenth month of the year\. Although GregorianCalendar does not use this value, lunar calendars do\.=Calendar.UNDECIMBER
XSET $AM int =Calendar.AM
XSET $PM int =Calendar.PM
XSET $ALL_STYLES int A style specifier for getDisplayNames indicating names in all styles, such as "January" and "Jan"\.=Calendar.ALL_STYLES
XSET $SHORT int A style specifier for getDisplayName and getDisplayNames equivalent to SHORT_FORMAT \.=Calendar.SHORT
XSET $LONG int A style specifier for getDisplayName and getDisplayNames equivalent to LONG_FORMAT \.=Calendar.LONG
XSET $NARROW_FORMAT int A style specifier for getDisplayName and getDisplayNames indicating a narrow name used for format\. Narrow names are typically single character strings, such as "M" for Monday\.=Calendar.NARROW_FORMAT
XSET $NARROW_STANDALONE int A style specifier for getDisplayName and getDisplayNames indicating a narrow name independently\. Narrow names are typically single character strings, such as "M" for Monday\.=Calendar.NARROW_STANDALONE
XSET $SHORT_FORMAT int A style specifier for getDisplayName and getDisplayNames indicating a short name used for format\.=Calendar.SHORT_FORMAT
XSET $LONG_FORMAT int A style specifier for getDisplayName and getDisplayNames indicating a long name used for format\.=Calendar.LONG_FORMAT
XSET $SHORT_STANDALONE int A style specifier for getDisplayName and getDisplayNames indicating a short name used independently, such as a month abbreviation as calendar headers\.=Calendar.SHORT_STANDALONE
XSET $LONG_STANDALONE int A style specifier for getDisplayName and getDisplayNames indicating a long name used independently, such as a month name as calendar headers\.=Calendar.LONG_STANDALONE
XSET $fields int[] The calendar field values for the currently set time for this calendar\. This is an array of FIELD_COUNT integers, with index values ERA through DST_OFFSET \.=fields
XSET $isSet boolean[] The flags which tell if a specified calendar field for the calendar is set\. A new object has no fields set\.  After the first call to a method which generates the fields, they all remain set after that\.=isSet
XSET $time long The currently set time for this calendar, expressed in milliseconds after January 1, 1970, 0:00:00 GMT\.=time
XSET $isTimeSet boolean True if then the value of time is valid\. The time is made invalid by a change to an item of field[]=isTimeSet
XSET $areFieldsSet boolean True if fields[] are in sync with the currently set time\. If false, then the next attempt to get the value of a field will force a recomputation of all fields from the current value of time \.=areFieldsSet
XSET $Calendar Constructs a Calendar with the default time zone and the default FORMAT locale\=.Calendar\()
XSET $Calendar Constructs a calendar with the specified time zone and locale\.=Calendar\(`TimeZone zone^, `Locale aLocale^)
XSET $getInstance Calendar\. Gets a calendar using the default time zone and locale\. The Calendar returned is based on the current time in the default time zone with the default FORMAT locale\.=Calendar.getInstance\()
XSET $getInstance Calendar\. Gets a calendar using the specified time zone and default locale\. The Calendar returned is based on the current time in the given time zone with the default FORMAT locale\.=Calendar.getInstance\(`TimeZone zone^)
XSET $getInstance Calendar\. Gets a calendar using the default time zone and specified locale\. The Calendar returned is based on the current time in the default time zone with the given locale\.=Calendar.getInstance\(`Locale aLocale^)
XSET $getInstance Calendar Gets a calendar with the specified time zone and locale\. The Calendar returned is based on the current time in the given time zone with the given locale\.=getInstance\(`TimeZone zone^, `Locale aLocale^)
XSET $getAvailableLocales Locale [] Returns an array of all locales for which the getInstance methods of this class can return localized instances\.=Calendar.getAvailableLocales\()
XSET $computeTime void Converts the current calendar field values in fields[] to the millisecond time value time \.=Calendar.computeTime\()
XSET $computeFields void Converts the current millisecond time value time to calendar field values in fields[] \.=Calendar.computeFields\()
XSET $getTime Date Returns a Date object representing this Calendar 's time value (millisecond offset from the Epoch ")\.=getTime\()
XSET $setTime void Sets this Calendar's time with the given Date \. Note: Calling setTime() with Date(Long\.MAX_VALUE) or Date(Long\.MIN_VALUE) may yield incorrect field values from get() \.=setTime\(`Date date^)
XSET $getTimeInMillis long Returns this Calendar's time value in milliseconds\.=getTimeInMillis\()
XSET $setTimeInMillis void Sets this Calendar's current time from the given long value\.=setTimeInMillis\(`long millis^)
XSET $get int Returns the value of the given calendar field\. In lenient mode, all calendar fields are normalized\. In non-lenient mode, all calendar fields are validated and this method throws an exception if any calendar fields have out-of-range values\.=get\(`int field^)
XSET $internalGet int Returns the value of the given calendar field\. This method does not involve normalization or validation of the field value\.=internalGet\(`int field^)
XSET $set void Sets the given calendar field to the given value\. The value is not interpreted by this method regardless of the leniency mode\.=set\(`int field^, `int value^)
XSET $set  void Sets the values for the calendar fields YEAR , MONTH , and DAY_OF_MONTH \. Previous values of other calendar fields are retained\.  If this is not desired, call clear() first\.=set\(`int year^, `int month^, `int date^)
XSET $set void Sets the values for the calendar fields YEAR , MONTH , DAY_OF_MONTH , HOUR_OF_DAY , and MINUTE \. Previous values of other fields are retained\.  If this is not desired, call clear() first\.=set\(`int year^, `int month^, `int date^, `int hourOfDay^, `int minute^)
XSET $set void Sets the values for the fields YEAR , MONTH , DAY_OF_MONTH , HOUR_OF_DAY , MINUTE , and SECOND \. Previous values of other fields are retained\.  If this is not desired, call clear() first\.=set\(`int year^, `int month^, `int date^, `int hourOfDay^, `int minute^, `int second^)
XSET $clear void Sets all the calendar field values and the time value (millisecond offset from the Epoch ) of this Calendar undefined\. This means that isSet() will return false for all the calendar fields=clear\()
XSET $clear void Sets the given calendar field value and the time value (millisecond offset from the Epoch ) of this Calendar undefined\. This means that isSet(field) will return false , and the date and time calculations will treat the field as if it had never been set\.=clear\(`int field^)
XSET $isSet boolean Determines if the given calendar field has a value set, including cases that the value has been set by internal fields calculations triggered by a get method call\.=isSet\(`int field^)
XSET $getDisplayName String Returns the string representation of the calendar field value in the given style and locale \.  If no string representation is applicable, null is returned\.=getDisplayName\(`int field^, `int style^, `Locale locale^)
XSET $getDisplayName Map < String , Integer > Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values\. For example, if this Calendar is a GregorianCalendar , the returned map would contain "Jan" to JANUARY , "Feb" to FEBRUARY , and so on=getDisplayNames\(`int field^, `int style^, `Locale locale^)
XSET $complete void Fills in any unset fields in the calendar fields\. First, the computeTime() method is called if the time value (millisecond offset from the Epoch ) has not been calculated from calendar field values\. Then, the computeFields() method is called to calculate all calendar field values\.=complete\()
XSET $getAvailableCalendarTypes Set < String > Returns an unmodifiable Set containing all calendar types supported by Calendar in the runtime environment\.=Calendar.getAvailableCalendarTypes\()
XSET $getCalendarType String Returns the calendar type of this Calendar\.=getCalendarType\()
XSET $equals boolean Compares this Calendar to the specified Object \.=equals\(`Object obj^)
XSET $hashCode int=hashCode\()
XSET $before boolean Returns whether this Calendar represents a time before the time represented by the specified Object \. This method is equivalent to: compareTo(when) < 0=before\(`Object when^)
XSET $after boolean Returns whether this Calendar represents a time after the time represented by the specified Object \. This method is equivalent to: compareTo(when) > 0=after\(`Object when^)
XSET $add void Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules\. For example, to subtract 5 days from the current time of the calendar, you can achieve it by calling: add(Calendar\.DAY_OF_MONTH, -5) \.=add\(`int field^, `int amount^)
XSET $roll void Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields\. For example, to roll the current date up by one day, you can achieve it by calling: roll(Calendar\.DATE, true)\.=roll\(`int field^, `boolean up^)
XSET $roll void Adds the specified (signed) amount to the specified calendar field without changing larger fields\.  A negative amount means to roll down\. NOTE:  This default implementation on Calendar just repeatedly calls the version of roll() that rolls by one unit\.=roll\(`int field^, `int amount^)
XSET $setTimeZone void =setTimeZone\(`TimeZone value^)
XSET $getTimeZone TimeZone=getTimeZone\()
XSET $setLenient void Specifies whether or not date/time interpretation is to be lenient\.  With lenient interpretation, a date such as "February 942, 1996" will be treated as being equivalent to the 941st day after February 1, 1996\. With strict (non-lenient) interpretation, such dates will cause an exception to be thrown\. The default is lenient\.=setLenient\(`boolean lenient^)
XSET $isLenient boolean Tells whether date/time interpretation is to be lenient\.=isLenient\()
XSET $setFirstDayOfWeek void Sets what the first day of the week is; e\.g\., SUNDAY in the U\.S\., MONDAY in France\.=setFirstDayOfWeek\(`int value^)
XSET $getFirstDayOfWeek int Gets what the first day of the week is=getFirstDayOfWeek\()
XSET $setMinimalDaysInFirstWeek void Sets what the minimal days required in the first week of the year are; For example, if the first week is defined as one that contains the first day of the first month of a year, call this method with value 1\. If it must be a full week, use value 7\.=setMinimalDaysInFirstWeek\(`int value^)
XSET $getMinimalDaysInFirstWeek int Gets what the minimal days required in the first week of the year are; e\.g\., if the first week is defined as one that contains the first day of the first month of a year, this method returns 1\. If the minimal days required must be a full week, this method returns 7\.=getMinimalDaysInFirstWeek\()
XSET $isWeekDateSupported boolean Returns whether this Calendar supports week dates\. The default implementation of this method returns false \.=isWeekDateSupported\()
XSET $getWeekYear int Returns the week year represented by this Calendar \. The week year is in sync with the week cycle\. The first day of the first week is the first day of the week year\.=getWeekYear\()
XSET $setWeekDate void Sets the date of this Calendar with the the given date specifiers - week year, week of year, and day of week\. Unlike the set method, all of the calendar fields and time values are calculated upon return\.=setWeekDate\(`int weekYear^, `int weekOfYear^, `int dayOfWeek^)
XSET $getWeeksInWeekYear int Returns the number of weeks in the week year represented by this Calendar \.=getWeeksInWeekYear\()
XSET $getMinimum int Returns the minimum value for the given calendar field of this Calendar instance\. The minimum value is defined as the smallest value returned by the get method for any possible time value\.=getMinimum\(`int field^)
XSET $getMaximum int Returns the maximum value for the given calendar field of this Calendar instance\. The maximum value is defined as the largest value returned by the get method for any possible time value\.=getMaximum\(`int field^)
XSET $getGreatestMinimum int Returns the highest minimum value for the given calendar field of this Calendar instance\. The highest minimum value is defined as the largest value returned by getActualMinimum(int) for any possible time value\.=getGreatestMinimum\(`int field^)
XSET $getLeastMaximum int Returns the lowest maximum value for the given calendar field of this Calendar instance\. The lowest maximum value is defined as the smallest value returned by getActualMaximum(int) for any possible time value\.=getLeastMaximum\(`int field^)
XSET $getActualMinimum int Returns the minimum value that the specified calendar field could have, given the time value of this Calendar \. The default implementation of this method uses an iterative algorithm to determine the actual minimum value for the calendar field\.=getActualMinimum\(`int field^)
XSET $getActualMaximum int Returns the maximum value that the specified calendar field could have, given the time value of this Calendar \. For example, the actual maximum value of the MONTH field is 12 in some years, and 13 in other years in the Hebrew calendar system\.=getActualMaximum\(`int field^)
XSET $clone Object Creates and returns a copy of this object\.=clone\()
XSET $toString String=toString\()
XSET $toInstant Instant Converts this object to an Instant \. The conversion creates an Instant that represents the same point on the time-line as this Calendar \.=toInstant\()


XPT GregorianCalendar alias=Calendar
XSET $BC int Value of the ERA field indicating BC=Gregorian.BC
XSET $AD int Value of the ERA field indicating=Gregorian.AD
XSET $GregorianCalendar Constructs a default GregorianCalendar using the current time in the default OR  given time zone with the default FORMAT OR  given locale\.=GregorianCalendar\(``TimeZone zone?`, ^`Locale aLocale?^)
XSET $GregorianCalendar Constructs a GregorianCalendar with the given date set in the default time zone with the default locale\.=GregorianCalendar\(`int year^, `int month^, `int dayOfMonth^`, `HOUR, MINUTE, AND SECOND{{^`int hourOfDay^, `int minute^`, `int second?^`}}^)
XSET $setGregorianChange void Sets the GregorianCalendar change date\. This is the point when the switch from Julian dates to Gregorian dates occurred\. Default is October 15, 1582 (Gregorian)\. Previous to this, dates will be in the Julian calendar\.=setGregorianChange\(`Date date^)
XSET $getGregorianChange Date Gets the Gregorian Calendar change date\.  This is the point when the switch from Julian dates to Gregorian dates occurred\. Default is October 15, 1582 (Gregorian)\.=getGregorianChange\()
XSET $isLeapYear boolean Determines if the given year is a leap year\. Returns true if the given year is a leap year\. To specify BC year numbers, 1 - year number must be given\. For example, year BC 4 is specified as -3\.=isLeapYear\(`int year^)
XSET $toZonedDateTime ZonedDateTime Converts this object to a ZonedDateTime that represents the same point on the time-line as this GregorianCalendar =toZonedDateTime\()
XSET $from GregorianCalendar Obtains an instance of GregorianCalendar with the default locale from a ZonedDateTime object\.=GregorianCalendar.from\(`ZonedDateTime zdt^)

XPT date setting=Comparable text=_chooseXSET
XSET $Date Allocates a Date object and initializes it so that it represents the time at which it was allocated, measured to the nearest millisecond\.=Date\()
XSET $Date Allocates a Date object and initializes it to represent the specified number of milliseconds since the standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT\.=Date\(`long date^)
XSET $clone Object Return a copy of this object\.=clone\()
XSET $getTime long Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Date object\.=getTime\()
XSET $setTime void Sets this Date object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT\.=setTime\(`long time^)
XSET $before boolean Tests if this date is before the specified date\.=before\(`Date when^)
XSET $after boolean Tests if this date is after the specified date\.=after\(`Date when^)
XSET $equals boolean Compares two dates for equality\.=equals\(`Object obj^)
XSET $hashCode int=hashCode\()
XSET $toString String=toString\()
XSET $from Date Obtains an instance of Date from an Instant object\. Instant uses a precision of nanoseconds, whereas Date uses a precision of milliseconds\.=Date.from\(`Instant instant^)
XSET $toInstant Instant Converts this Date object to an Instant \. The conversion creates an Instant that represents the same point on the time-line as this Date \.=toInstant\()

XPT f_simple_date
XSET fmt=pickL('m',{"January or 01":"M","yyyy":"Y","yy":"y","dd eg 02 for month/year":"D","Friday/Fri":"E","hh 12/24 hour format":"H","minutes":"M","seconds/millisecond":"S","am or pm":"a", "AD or BC":"G", "Week in year/month":"W", "Timezone":"Z"},"")
`fmt^

XPT f_str_date alias=_chooseXSET
XSET $c Complete date and time eg Mon May 04 09:51:52 CDT 2009=tc
XSET $F ISO 8601 date eg 2004-02-09=tF
XSET $D U\.S\. formatted date (month/day/year) eg 02/09/2004=tD
XSET $T 24-hour time eg 18:05:19=tT
XSET $r 12-hour time eg 06:05:19 pm=tr
XSET $R 24-hour time, no seconds eg 18:05=tR
XSET $Y Four-digit year (with leading zeroes) eg 2004=tY
XSET $y Last two digits of the year (with leading zeroes) eg 04=ty
XSET $C First two digits of the year (with leading zeroes) eg 20=tC
XSET $B Full month name eg February=tB
XSET $b Abbreviated month name eg Feb=tb
XSET $m Two-digit month (with leading zeroes) eg 02=tm
XSET $d Two-digit day (with leading zeroes) eg 03=td
XSET $e Two-digit day (without leading zeroes) eg 9=te
XSET $A Full weekday name eg Monday=tA
XSET $a Abbreviated weekday name eg Mon=ta
XSET $j Three-digit day of year (with leading zeroes) eg 069=tj
XSET $H Two-digit hour (with leading zeroes), between 00 and 23 eg 18=tH
XSET $k Two-digit hour (without leading zeroes), between 0 and 23 eg 18=tk
XSET $I Two-digit hour (with leading zeroes), between 01 and 12 eg 06=tI
XSET $l Two-digit hour (without leading zeroes), between 1 and 12 eg 6=tl
XSET $M Two-digit minutes (with leading zeroes) eg 05=tM
XSET $S Two-digit seconds (with leading zeroes) eg 19=tS
XSET $L Three-digit milliseconds (with leading zeroes) eg 047=tL
XSET $N Nine-digit nanoseconds (with leading zeroes) eg 047000000=tN
XSET $P Uppercase morning or afternoon marker eg PM=tP
XSET $p Lowercase morning or afternoon marker eg pm=tp
XSET $z RFC 822 numeric offset from GMT eg -0800=tz
`fmt^

XPT Format alias=_chooseXSET
XSET $format String Formats an object to produce a string\. This is equivalent to format (obj, new StringBuffer(), new FieldPosition(0))\.toString();=format\(`Object obj^)
XSET $format StringBuffer Formats an object and appends the resulting text to a given string buffer\. If the pos argument identifies a field used by the format, then its indices are set to the beginning and end of the first such field encountered\.=format\(`Object obj^, `StringBuffer toAppendTo^, `FieldPosition pos^)
XSET $formatToCharacterIterator AttributedCharacterIterator Formats an Object producing an AttributedCharacterIterator \. You can use the returned AttributedCharacterIterator to build the resulting String, as well as to determine information about the resulting String\.=formatToCharacterIterator\(`Object obj^)
XSET $parseObject Object Parses text from a string to produce an object\. The method attempts to parse text starting at the index given by pos \. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed object is returned\.=parseObject\(`String source^`, `ParsePosition pos?^)
XSET $clone Object =clone\()

XPT DateFormat alias=Format
XSET $calendar Calendar The Calendar instance used for calculating the date-time fields and the instant of time\.=calendar
XSET $numberFormat NumberFormat The number formatter that DateFormat uses to format numbers in dates and times\.=numberFormat
XSET $ERA_FIELD int Useful constant for ERA field alignment\. Used in FieldPosition of date/time formatting\.=DateFormat.ERA_FIELD
XSET $YEAR_FIELD int =DateFormat.YEAR_FIELD
XSET $MONTH_FIELD int =DateFormat.MONTH_FIELD
XSET $DATE_FIELD int =DateFormat.DATE_FIELD
XSET $HOUR_OF_DAY1_FIELD int Useful constant for one-based HOUR_OF_DAY field alignment\. Used in FieldPosition of date/time formatting\. HOUR_OF_DAY1_FIELD is used for the one-based 24-hour clock\. For example, 23:59 + 01:00 results in 24:59\.=DateFormat.HOUR_OF_DAY1_FIELD
XSET $HOUR_OF_DAY0_FIELD int Useful constant for zero-based HOUR_OF_DAY field alignment\. Used in FieldPosition of date/time formatting\. HOUR_OF_DAY0_FIELD is used for the zero-based 24-hour clock\. For example, 23:59 + 01:00 results in 00:59\.=DateFormat.HOUR_OF_DAY0_FIELD
XSET $MINUTE_FIELD int =DateFormat.MINUTE_FIELD
XSET $SECOND_FIELD int =DateFormat.SECOND_FIELD
XSET $MILLISECOND_FIELD int =DateFormat.MILLISECOND_FIELD
XSET $DAY_OF_WEEK_FIELD int =DateFormat.DAY_OF_WEEK_FIELD
XSET $DAY_OF_YEAR_FIELD int =DateFormat.DAY_OF_YEAR_FIELD
XSET $DAY_OF_WEEK_IN_MONTH_FIELD int =DateFormat.DAY_OF_WEEK_IN_MONTH_FIELD
XSET $WEEK_OF_YEAR_FIELD int =DateFormat.WEEK_OF_YEAR_FIELD
XSET $WEEK_OF_MONTH_FIELD int =DateFormat.WEEK_OF_MONTH_FIELD
XSET $AM_PM_FIELD int =DateFormat.AM_PM_FIELD
XSET $HOUR1_FIELD int Useful constant for one-based HOUR field alignment\. Used in FieldPosition of date/time formatting\. HOUR1_FIELD is used for the one-based 12-hour clock\. For example, 11:30 PM + 1 hour results in 12:30 AM\.=DateFormat.HOUR1_FIELD
XSET $HOUR0_FIELD int Useful constant for zero-based HOUR field alignment\. Used in FieldPosition of date/time formatting\. HOUR0_FIELD is used for the zero-based 12-hour clock\. For example, 11:30 PM + 1 hour results in 00:30 AM\.=DateFormat.HOUR0_FIELD
XSET $TIMEZONE_FIELD int =DateFormat.TIMEZONE_FIELD
XSET $FULL int Constant for full style pattern\.=DateFormat.FULL
XSET $LONG int Constant for long style pattern\.=DateFormat.LONG
XSET $MEDIUM int Constant for medium style pattern\.=DateFormat.MEDIUM
XSET $SHORT int Constant for short style pattern\.=DateFormat.SHORT
XSET $DEFAULT int Constant for default style pattern\.  Its value is MEDIUM\.=DateFormat.DEFAULT
XSET $parse Date Parses text from the beginning of the given string at maybe a given parse position to produce a date\. The method may not use the entire text of the given string\.=parse\(`String source^` ,`ParsePosition pos?^)
XSET $getTimeInstance DateFormat Gets the time formatter with the default formatting style OR with the given formatting style for the default FORMAT locale\.=getTimeInstance\(`int style?^)
XSET $getTimeInstance DateFormat Gets the time formatter with the given formatting style for the given locale\.=getTimeInstance\(`int style^, `Locale aLocale^)
XSET $getDateInstance DateFormat Gets the date formatter with the default OR given formatting style for the default FORMAT locale\.=getDateInstance\(`int style?^)
XSET $getDateInstance DateFormat Gets the date formatter with the given formatting style for the given locale\.=getDateInstance\(`int style^, `Locale aLocale^)
XSET $getDateTimeInstance DateFormat Gets the date/time formatter with the given date and time formatting styles for the default OR given FORMAT locale\.=getDateTimeInstance\(`int dateStyle^, `int timeStyle^`, `Locale aLocale?^)
XSET $getInstance DateFormat Get a default date/time formatter that uses the SHORT style for both the date and the time\.=getInstance\()
XSET $getAvailableLocales Locale [] Returns an array of all locales for which the get*Instance methods of this class can return localized instances\.=DateFormat.getAvailableLocales\()
XSET $setCalendar void Set the calendar to be used by this date format\.=setCalendar\(`Calendar newCalendar^)
XSET $setNumberFormat void Allows you to set the number formatter\.=setNumberFormat\(`NumberFormat newNumberFormat^)
XSET $getNumberFormat NumberFormat Gets the number formatter which this date/time formatter uses to format and parse a time\.=getNumberFormat\()
XSET $setTimeZone void Sets the time zone for the calendar of this DateFormat object\. This method is equivalent to the following call\. getCalendar()\.setTimeZone(zone)=setTimeZone\(`TimeZone zone^)
XSET $getTimeZone TimeZone Gets the time zone\. This method is equivalent to the following call\. getCalendar()\.getTimeZone()=getTimeZone\()
XSET $setLenient void Specify whether or not date/time parsing is to be lenient\.  With lenient parsing, the parser may use heuristics to interpret inputs that do not precisely match this object's format\.=setLenient\(`boolean lenient^)
XSET $isLenient public boolean Tell whether date/time parsing is to be lenient\. This method is equivalent to the following call\. getCalendar()\.isLenient()=isLenient\()
XSET $hashCode int =hashCode\()
XSET $equals boolean =equals\(`Object obj^)

XPT SimpleDateFormat alias=DateFormat
XSET $SimpleDateFormat Constructs a SimpleDateFormat using the default pattern and date format symbols for the default FORMAT locale\.=SimpleDateFormat\()
XSET $SimpleDateFormat Constructs a SimpleDateFormat using the given pattern and the default date format symbols for the given locale\.=SimpleDateFormat\(`String pattern^, `Locale locale^)
XSET $SimpleDateFormat Constructs a SimpleDateFormat using the given pattern and date format symbols\.=SimpleDateFormat\(`String pattern^, `DateFormatSymbols formatSymbols^)
XSET $set2DigitYearStart void Sets the 100-year period 2-digit years will be interpreted as being in to begin on the date the user specifies\.=set2DigitYearStart\(`Date startDate^)
XSET $get2DigitYearStart Date Returns the beginning date of the 100-year period 2-digit years are interpreted as being within\.=get2DigitYearStart\()
XSET $toPattern String Returns a pattern string describing this date format\.=toPattern\()
XSET $toLocalizedPattern String Returns a localized pattern string describing this date format\.=toLocalizedPattern\()
XSET $applyPattern void Applies the given pattern string to this date format\.=applyPattern\(`String pattern^)
XSET $applyLocalizedPattern void Applies the given localized pattern string to this date format\.=applyLocalizedPattern\(`String pattern^)
XSET $getDateFormatSymbols DateFormatSymbols Gets a copy of the date and time format symbols of this date format\.=getDateFormatSymbols\()
XSET $setDateFormatSymbols void Sets the date and time format symbols of this date format\.=setDateFormatSymbols\(`DateFormatSymbols newFormatSymbols^)

XPT Runnable alias=_chooseXSET
XSET $run void When an object implementing interface Runnable is used to create a thread, starting the thread causes the object's run method to be called in that separately executing thread\. The general contract of the method run is that it may take any action whatsoever\.=run\()

XPT Thread alias=Runnable
XSET $MIN_PRIORITY int The minimum priority that a thread can have\.=Thread.MIN_PRIORITY
XSET $NORM_PRIORITY int The default priority that is assigned to a thread\.=Thread.NORM_PRIORITY
XSET $MAX_PRIORITY int The maximum priority that a thread can have\.=Thread.MAX_PRIORITY
XSET $Thread Allocates a new Thread object\. This constructor has the same effect as Thread (null, null, gname) , where gname is a newly generated name\. Automatically generated names are of the form "Thread-"+ n , where n is an integer\.=Thread\()
XSET $Thread Allocates a new Thread object\. This constructor has the same effect as Thread (null, target, gname) , where gname is a newly generated name\.Parameters: target - the object whose run method is invoked when this thread is started\.=Thread\(`Runnable target^)
XSET $Thread Allocates a new Thread object\. This constructor has the same effect as Thread (group, target, gname) ,where gname is a newly generated name\.=Thread\(`ThreadGroup group^, `Runnable target^)
XSET $Thread Allocates a new Thread object\. This constructor has the same effect as Thread (null, null, name)=Thread\(`String name^)
XSET $Thread Allocates a new Thread object\. This constructor has the same effect as Thread (group, null, name) \.=Thread\(`ThreadGroup group^, `String name^)
XSET $Thread Allocates a new Thread object\. This constructor has the same effect as Thread (null, target, name) \.=Thread\(`Runnable target^, `String name^)
XSET $Thread Allocates a new Thread object so that it has target as its run object, has the specified name as its name, and belongs to the thread group referred to by group , and has the specified stack size\.=Thread\(`ThreadGroup group^`, `Runnable target^`, `String name^`, `long stackSize^)
XSET $currentThread Thread Returns a reference to the currently executing thread object\.=Thread.currentThread\()
XSET $yield void A hint to the scheduler that the current thread is willing to yield its current use of a processor\.=Thread.yield\()
XSET $sleep void Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, plus the specified
XSET $start void Causes this thread to begin execution; the Java Virtual Machine calls the run method of this thread\. The result is that two threads are running concurrently: the current thread (which returns from the call to the start method) and the other thread (which executes its run method)\.=start\()
XSET $interrupt void Interrupts this thread\.=interrupt\()
XSET $interrupted boolean Tests whether the current thread has been interrupted\.  The interrupted status of the thread is cleared by this method\.=Thread.interrupted\()
XSET $isInterrupted boolean Tests whether this thread has been interrupted\.  The interrupted status of the thread is unaffected by this method\.=isInterrupted\()
XSET $isAlive boolean Tests if this thread is alive\. A thread is alive if it has been started and has not yet died\.=isAlive\()
XSET $setPriority void Changes the priority of this thread\. First the checkAccess method of this thread is called with no arguments\. This may result in throwing a SecurityException \. Otherwise, the priority of this thread is set to the smaller of the specified newPriority and the maximum permitted priority of the thread's thread group\.=setPriority\(`int newPriority^)
XSET $getPriority int Returns this thread's priority\.=getPriority\()
XSET $setName void Changes the name of this thread to be equal to the argument name \. First the checkAccess method of this thread is called with no arguments\. This may result in throwing a SecurityException \.=setName\(`String name^)
XSET $getName String Returns this thread's name\.=getName\()
XSET $getThreadGroup ThreadGroup Returns the thread group to which this thread belongs\. This method returns null if this thread has died=getThreadGroup\()
XSET $activeCount int Returns an estimate of the number of active threads in the current thread's thread group and its subgroups\.=activeCount\()
XSET $enumerate int Copies into the specified array every active thread in the current
XSET $join void Waits at most millis milliseconds  plus nanos nanoseconds for this thread to die\.for this thread to die\. A timeout of 0 means to wait forever\. This implementation uses a loop of this\.wait calls conditioned on this\.isAlive \.=join\(`long millis^`, `int nanos^)
XSET $join void Waits for this thread to die\. An invocation of this method behaves in exactly the same way as the invocation join (0)=join\()
XSET $dumpStack void Prints a stack trace of the current thread to the standard error stream\. This method is used only for debugging\.=dumpStack\()
XSET $setDaemon void Marks this thread as either a daemon thread or a user thread\. The Java Virtual Machine exits when the only threads running are all daemon threads\. This method must be invoked before the thread is started\.=setDaemon\(`boolean on^)
XSET $isDaemon boolean Tests if this thread is a daemon thread\.=isDaemon\()
XSET $checkAccess void Determines if the currently running thread has permission to modify this thread\. If there is a security manager, its checkAccess method is called with this thread as its argument\. This may result in throwing a SecurityException \.=checkAccess\()
XSET $toString String =toString\()
XSET $getClassLoader ClassLoader Returns the context ClassLoader for this Thread\.=getContextClassLoader\()
XSET $setContextClassLoader void Sets the context ClassLoader for this Thread\.=setContextClassLoader\(`ClassLoader cl^)
XSET $holdsLock boolean Returns true if and only if the current thread holds the monitor lock on the specified object\.=Thread.holdsLock\(`Object obj^)
XSET $getStackTrace StackTraceElement [] Returns an array of stack trace elements representing the stack dump of this thread\.  This method will return a zero-length array if this thread has not started, has started but has not yet been scheduled to run by the system, or has terminated\.=getStackTrace\()
XSET $getAllStackTraces Map < Thread , StackTraceElement []> Returns a map of stack traces for all live threads\. The map keys are threads and each map value is an array of StackTraceElement that represents the stack dump of the corresponding Thread \.=Thread.getAllStackTraces\()
XSET $getId long Returns the identifier of this Thread\.  The thread ID is a positive long number generated when this thread was created\.=getId\()
XSET $getState Thread\.State Returns the state of this thread\.=getState\()
XSET $setDefaultUncaughtExceptionHandler void Set the default handler invoked when a thread abruptly terminates due to an uncaught exception, and no other handler has been defined for that thread\.=Thread.setDefaultUncaughtExceptionHandler\(`Thread.UncaughtExceptionHandler eh^)
XSET $getDefaultUncaughtExceptionHandler Thread\.UncaughtExceptionHandler Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception\. If the returned value is null, there is no default\.=Thread.getDefaultUncaughtExceptionHandler\()
XSET $getUncaughtExceptionHandler Thread\.UncaughtExceptionHandler Returns the handler invoked when this thread abruptly terminates due to an uncaught exception\.=getUncaughtExceptionHandler\()
XSET $setUncaughtExceptionHandler void Set the handler invoked when this thread abruptly terminates due to an uncaught exception\.=setUncaughtExceptionHandler\(`Thread.UncaughtExceptionHandler eh^)

XPT MatchResult alias=_chooseXSET
XSET $start Returns the start index of the match\. int of the subsequence captured by the given group during this match\.=start\(`int group^)
XSET $end int Returns the offset after the last character matched OR subsequence captured by the given group during this match\.=end\(`int group^)
XSET $group String Returns the input subsequence matched by the previous match\. For a matcher m with input sequence s , the expressions m\. group() and s\. substring( m\. start(), m\. end()) are equivalent\.=group\()
XSET $group String Returns the input subsequence captured by the given group during the previous match operation\.=group\(`int group^)
XSET $groupCount int Returns the number of capturing groups in this match result's pattern\. Group zero denotes the entire pattern by convention\. It is not included in this count\.=groupCount\()

XPT Matcher alias=MatchResult
XSET $pattern Pattern Returns the pattern that is interpreted by this matcher\.=pattern\()
XSET $toMatchResult MatchResult Returns the match state of this matcher as a MatchResult \.=toMatchResult\()
XSET $usePattern Matcher Changes the Pattern that this Matcher uses to find matches with\. This method causes this matcher to lose information about the groups of the last match that occurred\. The matcher's position in the input is maintained and its last append position is unaffected\.=usePattern\(`Pattern newPattern^)
XSET $reset Matcher Resets this matcher\. Resetting a matcher discards all of its explicit state information and sets its append position to zero\. The matcher's region is set to the default region, which is its entire character sequence\.=reset\()
XSET $reset Matcher Resets this matcher with a new input sequence\.=reset\(`CharSequence input^)
XSET $start int Returns the start index of the subsequence captured by the given named-capturing group during the previous match operation\.=start\(`String name^)
XSET $end int Returns the offset after the last character of the subsequence captured by the given named-capturing group during the previous match operation\.=end\(`String name^)
XSET $group String Returns the input subsequence captured by the given named-capturing group during the previous match operation\.=group\(`String name^)
XSET $matches boolean Attempts to match the entire region against the pattern\.=matches\()
XSET $find boolean Attempts to find the next OR starting at the specified index, subsequence of the input sequence that matches the pattern\.=find\(`int start?^)
XSET $lookingAt boolean Attempts to match the input sequence, starting at the beginning of the region, against the pattern\. Like the matches method, this method always starts at the beginning of the region; unlike that method, it does not require that the entire region be matched\.=lookingAt\()
XSET $quoteReplacement String Returns a literal replacement String for the specified String \.=Matcher.quoteReplacement\(`String s^)
XSET $appendReplacement Matcher Implements a non-terminal append-and-replace step\. This method performs the following actions: It reads characters from the input sequence, starting at the   append position, and appends them to the given string buffer\.  It   stops after reading the last character preceding the previous match,   that is, the character at index start() - 1 \. It appends the given replacement string to the string buffer\. It sets the append position of this matcher to the index of the last character matched, plus one, that is, to end() \.=appendReplacement\(`StringBuffer sb^, `String replacement^)
XSET $appendTail StringBuffer Implements a terminal append-and-replace step\. This method reads characters from the input sequence, starting at the append position, and appends them to the given string buffer\.=appendTail\(`StringBuffer sb^)
XSET $replaceAll String Replaces every subsequence of the input sequence that matches the pattern with the given replacement string\. This method first resets this matcher\.  It then scans the input sequence looking for matches of the pattern\.=replaceAll\(`String replacement^)
XSET $replaceFirst String Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string\. This method first resets this matcher\.  It then scans the input sequence looking for a match of the pattern\.=replaceFirst\(`String replacement^)
XSET $region Matcher Sets the limits of this matcher's region\. The region is the part of the input sequence that will be searched to find a match\. Invoking this method resets the matcher, and then sets the region to start at the index specified by the start parameter and end at the index specified by the end parameter\.=region\(`int start^, `int end^)
XSET $regionStart int Reports the start index of this matcher's region\.=regionStart\()
XSET $regionEnd int Reports the end index (exclusive) of this matcher's region\.=regionEnd\()
XSET $hasTransparentBounds boolean Queries the transparency of region bounds for this matcher\. This method returns true if this matcher uses transparent bounds, false if it uses opaque bounds\.=hasTransparentBounds\()
XSET $useTransparentBounds Matcher Sets the transparency of region bounds for this matcher\. Invoking this method with an argument of true will set this matcher to use transparent bounds\. If the boolean argument is false , then opaque bounds will be used\.=useTransparentBounds\(`boolean b^)
XSET $hasAnchoringBounds boolean Queries the anchoring of region bounds for this matcher\. This method returns true if this matcher uses anchoring bounds, false otherwise\.=hasAnchoringBounds\()
XSET $useAnchoringBounds Matcher Sets the anchoring of region bounds for this matcher\. Invoking this method with an argument of true will set this matcher to use anchoring bounds\. If the boolean argument is false , then non-anchoring bounds will be used\.=useAnchoringBounds\(`boolean b^)
XSET $toString String=toString\()
XSET $hitEnd boolean Returns true if the end of input was hit by the search engine in the last match operation performed by this matcher\.=hitEnd\()
XSET $requireEnd boolean Returns true if more input could change a positive match into a negative one\.=requireEnd\()

XPT Pattern alias=_chooseXSET
XSET $UNIX_LINES int Enables Unix lines mode\. In this mode, only the '\n' line terminator is recognized in the behavior of \. , ^ , and $ \.=Pattern.UNIX_LINES
XSET $CASE_INSENSITIVE int Enables case-insensitive matching\.=Pattern.CASE_INSENSITIVE
XSET $COMMENTS int Permits whitespace and comments in pattern\.=Pattern.COMMENTS
XSET $MULTILINE int Enables multiline mode\. In multiline mode the expressions ^ and $ match just after or just before, respectively, a line terminator or the end of the input sequence\.=Pattern.MULTILINE
XSET $LITERAL int Enables literal parsing of the pattern\. When this flag is specified then the input string that specifies the pattern is treated as a sequence of literal characters\. Metacharacters or escape sequences in the input sequence will be given no special meaning\.=Pattern.LITERAL
XSET $DOTALL int Enables dotall mode\. In dotall mode, the expression \. matches any character, including a line terminator\.=Pattern.DOTALL
XSET $UNICODE_CASE int Enables Unicode-aware case folding\. When this flag is specified then case-insensitive matching, when enabled by the CASE_INSENSITIVE flag, is done in a manner consistent with the Unicode Standard\.=Pattern.UNICODE_CASE
XSET $CANON_EQ int Enables canonical equivalence\. When this flag is specified then two characters will be considered to match if, and only if, their full canonical decompositions match\.=Pattern.CANON_EQ
XSET $compile Pattern Compiles the given regular expression into a pattern with the given flags\.=Pattern.compile\(`String regex^`, `int flags?^)
XSET $pattern String Returns the regular expression from which this pattern was compiled\.=pattern\()
XSET $toString String =toString\()
XSET $matcher Matcher Creates a matcher that will match the given input against this pattern\.=matcher\(`CharSequence input^)
XSET $flags int Returns this pattern's match flags\.=flags\()
XSET $matches boolean Compiles the given regular expression and attempts to match the given input against it\.=Pattern.matches\(`String regex^, `CharSequence input^)
XSET $split String [] Splits the given input sequence around matches of this pattern\.=split\(`CharSequence input^`, `int limit?^)
XSET $quote String Returns a literal pattern String for the specified String \. This method produces a String that can be used to create a Pattern that would match the string s as if it were a literal pattern\.=Pattern.quote\(`String s^)
XSET $asPredicate Predicate < String > Creates a predicate which can be used to match a string\.=asPredicate\()
XSET $splitAsStream Stream < String > Creates a stream from the given input sequence around matches of this pattern\. The stream returned by this method contains each substring of the input sequence that is terminated by another subsequence that matches this pattern or is terminated by the end of the input sequence\.=splitAsStream\(`CharSequence input^)

"---------------------         File System      ------------------------
XPT Closeable alias=_chooseXSET
XSET $close void Closes this resource, relinquishing any underlying resources\. =close\()

XPT Flushable alias=_chooseXSET
XSET $flush void Flushes this stream by writing any buffered output to the underlying stream\.=flush\()

XPT InputStream alias=Closeable
XSET $read int Reads the next byte of data from the input stream\. The value byte is returned as an int in the range 0 to 255 \. If no byte is available because the end of the stream has been reached, the value -1 is returned\.=read\()
XSET $read int Reads some number of bytes from the input stream and stores them into the buffer array b \. The number of bytes actually read is returned as an integer\.=read\(`byte[] b^)
XSET $read int Reads up to len bytes of data from the input stream into an array of bytes\.  An attempt is made to read as many as len bytes, but a smaller number may be read\. The number of bytes actually read is returned as an integer\.=read\(`byte[] b^, `int off^, `int len^)
XSET $skip long Skips over and discards n bytes of data from this input stream\. The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0 \. This may result from any of a number of conditions; reaching end of file before n bytes have been skipped is only one possibility\. The actual number of bytes skipped is returned\.=skip\(`long n^)
XSET $available int Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream\.=available\()
XSET $mark void Marks the current position in this input stream\. A subsequent call to the reset method repositions this stream at the last marked position so that subsequent reads re-read the same bytes\. The readlimit arguments tells this input stream to allow that many bytes to be read before the mark position gets invalidated\.=mark\(`int readlimit^)
XSET $reset void Repositions this stream to the position at the time the mark method was last called on this input stream\.=reset\()
XSET $markSupported boolean Tests if this input stream supports the mark and reset methods\.=markSupported\()

XPT FileInputStream alias=InputStream
XSET $FileInputStream Creates a FileInputStream by opening a connection to an actual file, the file named OR File Object by the path name name in the file system\.=FileInputStream\(`String/File name/file^)
XSET $FileInputStream Creates a FileInputStream by using the file descriptor fdObj , which represents an existing connection to an actual file in the file system\. If there is a security manager, its checkRead method is called with the file descriptor fdObj as its argument to see if it's ok to read the file descriptor\.=FileInputStream\(`FileDescriptor fdObj^)
XSET $getFD FileDescriptor Returns the FileDescriptor object  that represents the connection to the actual file in the file system being used by this FileInputStream \.=getFD\()
XSET $getChannel FileChannel Returns the unique FileChannel object associated with this file input stream\.=getChannel\()

XPT OutputStream setting=Closeable|Flushable text=_chooseXSET
XSET $write void Writes the specified byte to this output stream\. The general contract for write is that one byte is written to the output stream\.=write\(`int b^)
XSET $write void Writes b\.length bytes from the specified byte array to this output stream\.=write\(`byte[] b^)
XSET $write void Writes len bytes from the specified byte array starting at offset off to this output stream\.=write\(`byte[] b^, `int off^, `int len^)

XPT FileOutputStream alias=FileOutputStream
XSET $FileOutputStream Creates a file output stream to write to the file OR specified File object with the specified name\.=FileOutputStream\(`String/File name/file^)
XSET $FileOutputStream Creates a file output stream to write to the file OR File Object with the specified name\.  If the second argument is true , then bytes will be written to the end of the file rather than the beginning\.=FileOutputStream\(`String/File name/file^, `boolean append^)
XSET $FileOutputStream Creates a file output stream to write to the specified file descriptor, which represents an existing connection to an actual file in the file system\.=FileOutputStream\(`FileDescriptor fdObj^)
XSET $getFD FileDescriptor Returns the file descriptor associated with this stream\.=getFD\()
XSET $getChannel FileChannel Returns the unique FileChannel object associated with this file output stream\.=getChannel\()

XPT Writer setting=Closeable|Flushable text=_chooseXSET
XSET $lock Object The object used to synchronize operations on this stream\. For efficiency, a character-stream object may use an object other than itself to protect critical sections\.=lock
XSET $Writer Creates a new character-stream writer whose critical sections will synchronize on the writer itself\.=Writer\()
XSET $Writer Creates a new character-stream writer whose critical sections will synchronize on the given object\.=Writer\(`Object lock^)
XSET $write void Writes a single character OR string\.=write\(`int/String c/str^)
XSET $write void Writes an array of characters\.=write\(`char[] cbuf^)
XSET $write void Writes a portion of a string OR array of characters\.=write\(`char[]/String cbuf/str^, `int off^, `int len^)
XSET $append Writer Appends the specified character sequence OR character to this writer\.=append\(`CharSequence/char csq/c^)
XSET $append Writer Appends a subsequence of the specified character sequence to this writer\.=append\(`CharSequence csq^, `int start^, `int end^)

XPT OutputStreamWriter alias=Writer
XSET $OutputStreamWriter Creates an OutputStreamWriter that using the default charset OR given named charset OR Charset Object OR CharsetEncoder object\.=OutputStreamWriter\(`OutputStream out e.g System.out^`, `String/Charset/CharsetEncoder charsetName/cs/enc?^)
XSEt $getEncoding String Returns the name of the character encoding being used by this stream\.=getEncoding\()

XPT FileWriter alias=OutputStreamWriter
XSET $FileWriter Constructs a FileWriter object given a file name OR File object with maybe a boolean indicating whether or not to append the data written\.=FileWriter\(`String/File fileName/file^`, `boolean append?^)
XSET $FileWriter Constructs a FileWriter object associated with a file descriptor\.=FileWriter\(`FileDescriptor fd^)

XPT Readable alias=_chooseXSET
XSET $read int Attempts to read characters into the specified character buffer\. Returns The number of char values added to the buffer, or -1 if this source of characters is at its end=read\(`CharBuffer cb^)

XPT Reader setting=Readable|Closeable text=_chooseXSET
XSET $lock Object The object used to synchronize operations on this stream\.  For efficiency, a character-stream object may use an object other than itself to protect critical sections\.=lock
XSET $Reader Creates a new character-stream reader whose critical sections will synchronize on the reader itself\.=Reader\()
XSET $Reader Creates a new character-stream reader whose critical sections will synchronize on the given object\.=Reader\(`Object lock^)
XSET $read int Reads a single character\. Return int read or -1 on failure=read\()
XSET $read int Reads characters into an array\.=read\(`char[] cbuf^)
XSET $read int Reads characters into a portion of an array\.=read\(`char[] cbuf^, `int off^, `int len^)
XSET $skip long Skips characters\.=skip\(`long n^)
XSET $ready boolean Tells whether this stream is ready to be read\.=ready\()
XSET $markSupported boolean Tells whether this stream supports the mark() operation\.=markSupported\()
XSET $mark void Marks the present position in the stream\.  Subsequent calls to reset() will attempt to reposition the stream to this point\.readAheadLimit - Limit on the number of characters that may be read while still preserving the mark\.  After reading this many characters, attempting to reset the stream may fail\.=mark\(`int readAheadLimit^)
XSET $reset void Resets the stream\.  If the stream has been marked, then attempt to reposition it at the mark\.=reset\()

XPT InputStreamReader alias=Reader
XSET $InputStreamReader Creates an InputStreamReader that uses the default charset OR given named charset OR Charset object OR CharsetDecoder object\.=InputStreamReader\(`InputStream in e.g System.in^`, `String/Charset/CharsetDecoder charsetName/cs/dec^)
XSET $getEncoding String Returns the name of the character encoding being used by this stream\. If the encoding has an historical name then that name is returned; otherwise the encoding's canonical name is returned\.=getEncoding\()

XPT FileReader alias=InputStreamReader
XSET $FileReader Creates a new FileReader , given the File object OR FileDescriptor object OR name of the file to read from\.=FileReader\(`String/File/FileDescriptor fileName/file/fd^)

XPT ByteArrayInputStream alias=InputStream
XSET $buf byte[] An array of bytes that was provided by the creator of the stream\. Elements buf[0] through buf[count-1] are the only bytes that can ever be read from the stream;  element buf[pos] is the next byte to be read\.=buf
XSET $pos int The index of the next character to read from the input stream buffer\. This value should always be nonnegative and not larger than the value of count \.=pos
XSET $mark int The currently marked position in the stream\. ByteArrayInputStream objects are marked at position zero by default when constructed\.  They may be marked at another position within the buffer by the mark() method\.=mark
XSET $count int The index one greater than the last valid character in the input stream buffer\. This value should always be nonnegative and not larger than the length of buf \.=count
XSET $ByteArrayInputStream Creates a ByteArrayInputStream so that it  uses buf as its buffer array\. The buffer array is not copied\.=ByteArrayInputStream\(`byte[] buf^)
XSET $ByteArrayInputStream Creates ByteArrayInputStream that uses buf as its buffer array\. The initial value of pos is offset and the initial value of count is the minimum of offset+length and buf\.length \.=ByteArrayInputStream\(`byte[] buf^, `int offset^, `int length^)

XPT ByteArrayOutputStream alias=OutputStream
XSET $buf byte[] The buffer where data is stored\.=buf
XSET $count int The number of valid bytes in the buffer\.=count
XSET $ByteArrayOutputStream Creates a new byte array output stream\. The buffer capacity is initially 32 bytes, though its size increases if necessary\.=ByteArrayOutputStream\()
XSET $ByteArrayOutputStream Creates a new byte array output stream, with a buffer capacity of the specified size, in bytes\.=ByteArrayOutputStream\(`int size^)
XSET $writeTo void Writes the complete contents of this byte array output stream to the specified output stream argument, as if by calling the output stream's write method using out\.write(buf, 0, count) \.=writeTo\(`OutputStream out^)
XSET $reset void Resets the count field of this byte array output stream to zero, so that all currently accumulated output in the output stream is discarded\.=reset\()
XSET $toByteArray byte[] Creates a newly allocated byte array\.=toByteArray\()
XSET $size int Returns the current size of the buffer\.=size\()
XSET $toString toString() String=toString\()
XSET $toString toString(String charsetName) String Converts the buffer's contents into a string by decoding the bytes using the named charset \.=toString\(`String charsetName^)

XPT FilterInputStream alias=InputStream
XSET $in InputStream The input stream to be filtered\.=in
XSET $FilterInputStream Creates a FilterInputStream by assigning the  argument in to the field this\.in so as to remember it for later use\.=FilterInputStream\(`InputStream in^)

XPT FilterOutputStream alias=OutputStream
XSET $out OutputStream The underlying output stream to be filtered\.=out
XSET $FilterOutputStream Creates an output stream filter built on top of the specified underlying output stream\.=FilterOutputStream\(`OutputStream out^)

XPT DataInput alias=_chooseXSET
XSET $readFully void Reads some bytes from an input stream and stores them into the buffer array b \. The number of bytes read is equal to the length of b \.=readFully\(`byte[] b^)
XSET $readFully void Reads len bytes from an input stream into buffer b\.=readFully\(`byte[] b^, `int off^, `int len^)
XSET $skipBytes int Makes an attempt to skip over n bytes of data from the input stream, discarding the skipped bytes\.The actual number of bytes skipped is returned\.=skipBytes\(`int n^)
XSET $readBoolean boolean Reads one input byte and returns true if that byte is nonzero, false if that byte is zero\. This method is suitable for reading the byte written by the writeBoolean method of interface DataOutput \.=readBoolean\()
XSET $readByte byte Reads and returns one input byte\. The byte is treated as a signed value in the range -128 through 127 , inclusive\.=readByte\()
XSET $readUnsignedByte int Reads one input byte, zero-extends it to type int , and returns the result, which is therefore in the range 0 through 255 \.=readUnsignedByte\()
XSET $readShort short Reads two input bytes and returns a short value\.=readShort\()
XSET $readUnsignedShort int Reads two input bytes and returns an int value in the range 0 through 65535 \.=readUnsignedShort\()
XSET $readChar char Reads two input bytes and returns a char value\.=readChar\()
XSET $readInt int Reads four input bytes and returns an int value\.=readInt\()
XSET $readLong long Reads eight input bytes and returns a long value\.=readLong\()
XSET $readFloat float Reads four input bytes and returns a float value\.=readFloat\()
XSET $readDouble double Reads eight input bytes and returns a double value\.=readDouble\()
XSET $readLine String Reads the next line of text from the input stream\. It reads successive bytes, converting each byte separately into a character, until it encounters a line terminator or end of file;=readLine\()
XSET $readUTF String Reads in a string that has been encoded using a modified UTF-8 format\.=readUTF\()

XPT DataOutput alias=_chooseXSET
XSET $write void Writes to the output stream the eight low-order bits int of the argument b \.=write\(`int b^)
XSET $write void Writes to the output stream all the bytes in array b \.=write\(`byte[] b^)
XSET $write void Writes len bytes from array b , in order,  to the output stream\.=write\(`byte[] b^, `int off^, `int len^)
XSET $writeBoolean void =writeBoolean\(`boolean v^)
XSET $writeByte void =writeByte\(`int v^)
XSET $writeShort void =writeShort\(`int v^)
XSET $writeChar void =writeChar\(`int v^)
XSET $writeInt void =writeInt\(`int v^)
XSET $writeLong void =writeLong\(`long v^)
XSET $writeFloat void =writeFloat\(`float v^)
XSET $writeDouble void =writeDouble\(`double v^)
XSET $writeBytes void Writes a string to the output stream\. For every character in the string s ,  taken in order, one byte is written to the output stream\.=writeBytes\(`String s^)
XSET $writeChars void Writes every character in the string s , to the output stream, in order, two bytes per character\.=writeChars\(`String s^)
XSET $writeUTF void Writes two bytes of length information to the output stream, followed by the modified UTF-8 representation of  every character in the string s \.=writeUTF\(`String s^)

XPT DataInputStream setting=FileInputStream|DataInput text=_chooseXSET
XSET $DataInputStream Creates a DataInputStream that uses the specified underlying InputStream\.=DataInputStream\(`InputStream in^)
XSET $readUTF static String Reads from the stream in a representation of a Unicode  character string encoded in modified UTF-8 format; this string of characters is then returned as a String \.=DataInputStream.readUTF\(`DataInput in^)

XPT DataOutputStream setting=FilterOutputStream|DataOutput text=_chooseXSET
XSET $written int The number of bytes written to the data output stream so far\.=written
XSET $DataOutputStream Creates a new data output stream to write data to the specified underlying output stream\. The counter written is set to zero\.=DataOutputStream\(`OutputStream out^)
XSET $size int Returns the current value of the counter written , the number of bytes written to this data output stream so far\.=size\()

XPT File alias=Comparable
XSET $separatorChar char The system-dependent default name-separator character\.=File.separatorChar
XSET $separator String The system-dependent default name-separator character, represented as a string for convenience\.=File.separator
XSET $pathSeparatorChar char The system-dependent path-separator character\.  This field is initialized to contain the first character of the value of the system property path\.separator \.=File.pathSeparatorChar
XSET $pathSeparator String The system-dependent path-separator character, represented as a string for convenience\.  This string contains a single character, namely pathSeparatorChar \.=File.pathSeparator
XSET $File Creates a new File instance by converting the given pathname string into an abstract pathname\.  If the given string is the empty string, then the result is the empty abstract pathname\.=File\(`String pathname^)
XSET $File Creates a new File instance from a parent pathname string OR File object and a child pathname string\.=File\(`String/File parent^, `String child^)
XSET $File Creates a new File instance by converting the given file: URI into an abstract pathname\.=File\(`URI uri^)
XSET $getName String Returns the name of the file or directory denoted by this abstract pathname\.  This is just the last name in the pathname's name sequence\.=getName\()
XSET $getParent String Returns the pathname string of this abstract pathname's parent, or null if this pathname does not name a parent directory\.=getParent\()
XSET $getParentFile File Returns the abstract pathname of this abstract pathname's parent, or null if this pathname does not name a parent directory\.=getParentFile\()
XSET $getPath String Converts this abstract pathname into a pathname string\.  The resulting string uses the default name-separator character to separate the names in the name sequence\.=getPath\()
XSET $isAbsolute boolean Tests whether this abstract pathname is absolute\.=isAbsolute\()
XSET $getAbsolutePath String Returns the absolute pathname string of this abstract pathname\.=getAbsolutePath\()
XSET $getAbsoluteFile File Returns the absolute form of this abstract pathname\.  Equivalent to new File(this\. getAbsolutePath() )=getAbsoluteFile\()
XSET $getCanonicalPath String Returns the canonical pathname string of this abstract pathname\. A canonical pathname is both absolute and unique\.=getCanonicalPath\()
XSET $getCanonicalFile public File Returns the canonical form of this abstract pathname\.  Equivalent to new File(this\. getCanonicalPath() )=getCanonicalFile\()
XSET $toURI URI Constructs a file: URI that represents this abstract pathname\.=toURI\()
XSET $canRead boolean Tests whether the application can read the file denoted by this abstract pathname, readable\.=canRead\()
XSET $canWrite boolean Tests whether the application can modify the file denoted by this abstract pathname\. writable=canWrite\()
XSET $exists boolean Tests whether the file or directory denoted by this abstract pathname exists\.=exists\()
XSET $isDirectory boolean Tests whether the file denoted by this abstract pathname is a directory\.=isDirectory\()
XSET $isFile boolean Tests whether the file denoted by this abstract pathname is a normal file\.=isFile\()
XSET $isHidden boolean Tests whether the file named by this abstract pathname is a hidden file\.=isHidden\()
XSET $lastModified long Returns the time that the file denoted by this abstract pathname was last modified\.=lastModified\()
XSET $length long Returns the length, in bytes, of the file denoted by this abstract pathname\.=length\()
XSET $createNewFile boolean Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist\.Returns: true if the named file does not exist and was successfully created; false if the named file already exists=createNewFile\()
XSET $delete boolean Deletes the file or directory denoted by this abstract pathname\.  If this pathname denotes a directory, then the directory must be empty in order to be deleted\.=delete\()
XSET $deleteOnExit void Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates\.=deleteOnExit\()
XSET $list String [] Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname\. optionally providing a FilenameFilter object=list\(`FilenameFilter filter?^)
XSET $listFiles File [] Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname\. optionally providing a FilenameFilter OR FileFilter object=listFiles\(`FilenameFilter/FileFilter filter^)
XSET $mkdir boolean Creates the directory named by this abstract pathname\.Returns: true if and only if the directory was created; false otherwise=mkdir\()
XSET $mkdirs boolean Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories\.Returns: true if and only if the directory was created, along with all necessary parent directories; false otherwise=mkdirs\()
XSET $renameTo boolean Renames the file denoted by this abstract pathname\.=renameTo\(`File dest^)
XSET $setLastModified boolean Sets the last-modified time of the file or directory named by this abstract pathname\.=setLastModified\(`long time^)
XSET $setReadOnly boolean Marks the file or directory named by this abstract pathname so that only read operations are allowed\.=setReadOnly\()
XSET $setWritable boolean Sets the owner's or everybody's write permission for this abstract pathname\.=setWritable\(`boolean writable^`, `boolean ownerOnly?^)
XSET $setReadable boolean Sets the owner's or everybody's read permission for this abstract pathname\.=setReadable\(`boolean readable^`, `boolean ownerOnly^)
XSET $setExecutable boolean Sets the owner's or everybody's execute permission for this abstract pathname\.=setExecutable\(`boolean executable^`, `boolean ownerOnly^)
XSET $canExecute boolean Tests whether the application can execute the file denoted by this abstract pathname\.=canExecute\()
XSET $listRoots File [] List the available filesystem roots\.=File.listRoots\()
XSET $getTotalSpace long Returns the size of the partition named by this abstract pathname\.=getTotalSpace\()
XSET $getFreeSpace long Returns the number of unallocated bytes in the partition named by this abstract path name\.=getFreeSpace\()
XSET $getUsableSpace long Returns the number of bytes available to this virtual machine on the partition named by this abstract pathname\.=getUsableSpace\()
XSET $createTempFile static File Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name\.=File.createTempFile\(`String prefix^, `String suffix^`, `File directory?^)
XSET $equals boolean =equals\(`Object obj^)
XSET $hashCode int =hashCode\()
XSET $toString String =toString\()
XSET $toPath public Path Returns a java\.nio\.file\.Path object constructed from the this abstract path\.=toPath\()

XPT Throwable synonym=Exception alias=_chooseXSET
XSET $Throwable Constructs a new throwable with null as its detail message\.=`\$_xSnipName^\()
XSET $Throwable Constructs a new throwable with the specified detail message and cause\.=`\$_xSnipName^\(`String message^, `Throwable cause^`, `boolean enableSuppression?^)
XSET $Throwable Constructs a new throwable with the specified cause and a detail message of (cause\=\=null ? null : cause\.toString()) (which typically contains the class and detail message of cause )\.=`\$_xSnipName^\(`Throwable cause^)
XSET $getMessage String Returns the detail message string of this throwable\.=getMessage\()
XSET $getLocalizedMessage String Creates a localized description of this throwable\.=getLocalizedMessage\()
XSET $getCause Throwable Returns the cause of this throwable or null if the cause is nonexistent or unknown\.=getCause\()
XSET $initCause Throwable Initializes the cause of this throwable to the specified value\. (The cause is the throwable that caused this throwable to get thrown\.)=initCause\(`Throwable cause^)
XSET $toString String =toString\()
XSET $printStackTrace void Prints this throwable and its backtrace to the standard error stream OR specified print stream OR print writer\.=printStackTrace\(`PrintStream/PrintWriter s?^)
XSET $fillInStackTrace Throwable Fills in the execution stack trace\. This method records within this Throwable object information about the current state of the stack frames for the current thread\.=fillInStackTrace\()
XSET $getStackTrace StackTraceElement [] Provides programmatic access to the stack trace information printed by printStackTrace() \.  Returns an array of stack trace elements, each representing one stack frame\.=getStackTrace\()
XSET $setStackTrace void Sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods\.=setStackTrace\(`StackTraceElement [] stackTrace^)
XSET $addSuppressed void Appends the specified exception to the exceptions that were suppressed in order to deliver this exception\. This method is thread-safe and typically called (automatically and implicitly)=addSuppressed\(`Throwable exception^)
XSET $getSuppressed Throwable [] Returns an array containing all of the exceptions that were suppressed, typically by the try -with-resources statement, in order to deliver this exception\.=getSuppressed\()

XPT Collection alias=_chooseXSET
XSET $EMPTY_SET Set The empty set (immutable)\.  This set is serializable\.=Collection.EMPTY_SET
XSET $EMPTY_LIST List The empty list (immutable)\.  This list is serializable\.=Collection.EMPTY_LIST
XSET $EMPTY_MAP Map The empty map (immutable)\.  This map is serializable\.=Collection.EMPTY_MAP
XSET $sort <T extends Comparable <? super T>> void Sorts the specified list into ascending order, according to the natural ordering of its elements\.=Collection.sort\(`List <T> list^)
XSET $sort <T> void Sorts the specified list according to the order induced by the specified comparator\.=sort\(`List <T> list^, `Comparator <? super T> c^)
XSET $binarySearch <T> int Searches the specified list for the specified object using the binary search algorithm\.  The list must be sorted into ascending order according to the natural ordering of its elements (as by the sort(List) method) prior to making this call\.=Collection.binarySearch\(`List <? extends Comparable <? super T>> list^, `T key^)
XSET $binarySearch <T> int Searches the specified list for the specified object using the binary search algorithm\.  The list must be sorted into ascending order according to the specified comparator (as by the sort(List, Comparator) method), prior to making this call\.=Collection.binarySearch\(`List <? extends T> list^, `T key^, `Comparator <? super T> c^)
XSET $reverse void Reverses the order of the elements in the specified list\.=Collection.reverse\(`List <?> list^)
XSET $shuffle void Randomly permutes the specified list using a default source of randomness\.  All permutations occur with approximately equal likelihood\.=Collection.shuffle\(`List <?> list^)
XSET $shuffle void Randomly permute the specified list using the specified source of randomness\.  All permutations occur with equal likelihood assuming that the source of randomness is fair\.=Collection.shuffle\(`List <?> list^, `Random rnd^)
XSET $swap void Swaps the elements at the specified positions in the specified list\.=Collection.swap\(`List <?> list^, `int i^, `int j^)
XSET $fill <T> void Replaces all of the elements of the specified list with the specified element\.=Collection.fill\(`List <? super T> list^, `T obj^)
XSET $copy <T> void Copies all of the elements from one list into another\.  After the operation, the index of each copied element in the destination list will be identical to its index in the source list\.=Collection.copy\(`List <? super T> dest^, `List <? extends T> src^)
XSET $min <T extends Object & Comparable <? super T>> T =Collection.min\(`Collection <? extends T> coll^)
XSET $min <T> T Returns the minimum element of the given collection, according to the order induced by the specified comparator\.=Collection.min\(`Collection <? extends T> coll^, `Comparator <? super T> comp^)
XSET $max <T extends Object & Comparable <? super T>> T =max\(`Collection <? extends T> coll^)
XSET $max <T> T Returns the maximum element of the given collection, according to the order induced by the specified comparator\.=max\(`Collection <? extends T> coll^, `Comparator <? super T> comp^)
XSET $rotate void Rotates the elements in the specified list by the specified distance\. After calling this method, the element at index i will be the element previously at index (i - distance) mod list\.size() , for all values of i between 0 and list\.size()-1 , inclusive\.=Collection.rotate\(`List <?> list^, `int distance^)
XSET $replaceAll <T> boolean Replaces all occurrences of one specified value in a list with another\.=Collection.replaceAll\(`List <T> list^, `T oldVal^, `T newVal^)
XSET $indexOfSubList int Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence\.=Collection.indexOfSubList\(`List <?> source^, `List <?> target^)
XSET $lastIndexOfSubList int Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence\.=Collection.lastIndexOfSubList\(`List <?> source^, `List <?> target^)
XSET $unmodifiableCollection <T> Collection <T> Returns an unmodifiable view of the specified collection\.=Collectioon.unmodifiableCollection\(`Collection <? extends T> c^)
XSET $unmodifiableSet <T> Set <T> Returns an unmodifiable view of the specified set\.=Collection.unmodifiableSet\(`Set <? extends T> s^)
XSET $unmodifiableSortedSet <T> SortedSet <T> Returns an unmodifiable view of the specified sorted set\.=Collection.unmodifiableSortedSet\(`SortedSet <T> s^)
XSET $unmodifiableNavigableSet <T> NavigableSet <T> Returns an unmodifiable view of the specified navigable set\.=Collection.unmodifiableNavigableSet\(`NavigableSet <T> s^)
XSET $unmodifiableList <T> List <T> Returns an unmodifiable view of the specified list\.=Collection.unmodifiableList\(`List <? extends T> list^)
XSET $unmodifiableMap <K,V> Map <K,V> Returns an unmodifiable view of the specified map\.=Collection.unmodifiableMap\(`Map <? extends K,? extends V> m^)
XSET $unmodifiableSortedMap <K,V> SortedMap <K,V> Returns an unmodifiable view of the specified sorted map\.=Collection.unmodifiableSortedMap\(`SortedMap <K,? extends V> m^)
XSET $unmodifiableNavigableMap <K,V> NavigableMap <K,V> Returns an unmodifiable view of the specified navigable map\.=Collection.unmodifiableNavigableMap\(`NavigableMap <K,? extends V> m^)
XSET $synchronizedCollection <T> Collection <T> turns a synchronized (thread-safe) collection backed by the specified collection\.=Collection.synchronizedCollection\(`Collection <T> c^)
XSET $synchronizedSet <T> Set <T> Returns a synchronized (thread-safe) set backed by the specified set\.=Collection.synchronizedSet\(`Set <T> s^)
XSET $synchronizedSortedSet <T> SortedSet <T> Returns a synchronized (thread-safe) sorted set backed by the specified sorted set\.=Collection.synchronizedSortedSet\(`SortedSet <T> s^)
XSET $synchronizedNavigableSet <T> NavigableSet <T> Returns a synchronized (thread-safe) navigable set backed by the specified navigable set\.=Collection.synchronizedNavigableSet\(`NavigableSet <T> s^)
XSET $synchronizedList <T> List <T> Returns a synchronized (thread-safe) list backed by the specified list\.=Collection.synchronizedList\(`List <T> list^)
XSET $synchronizedMap <K,V> Map <K,V> Returns a synchronized (thread-safe) map backed by the specified map\.=Collection.synchronizedMap\(`Map <K,V> m^)
XSET $synchronizedSortedMap <K,V> SortedMap <K,V> Returns a synchronized (thread-safe) sorted map backed by the specified sorted map\.=Collection.synchronizedSortedMap\(`SortedMap <K,V> m^)
XSET $synchronizedNavigableMap <K,V> NavigableMap <K,V> Returns a synchronized (thread-safe) navigable map backed by the specified navigable map\.=Collection.synchronizedNavigableMap\(`NavigableMap <K,V> m^)
XSET $checkedCollection <E> Collection <E> Returns a dynamically typesafe view of the specified collection\.=Collection.checkedCollection\(`Collection <E> c^, `Class <E> type^)
XSET $checkedQueue <E> Queue <E> Returns a dynamically typesafe view of the specified queue\.=Collection.checkedQueue\(`Queue <E> queue^, `Class <E> type^)
XSET $checkedSet <E> Set <E> Returns a dynamically typesafe view of the specified set\.=Collection.checkedSet\(`Set <E> s^, `Class <E> type^)
XSET $checkedSortedSet <E> SortedSet <E> Returns a dynamically typesafe view of the specified sorted set\.=checkedSortedSet\(`SortedSet <E> s^, `Class <E> type^)
XSET $checkedNavigableSet <E> NavigableSet <E> Returns a dynamically typesafe view of the specified navigable set\.=Collection.checkedNavigableSet\(`NavigableSet <E> s^, `Class <E> type^)
XSET $checkedList <E> List <E> Returns a dynamically typesafe view of the specified list\.=Collection.checkedList\(`List <E> list^, `Class <E> type^)
XSET $checkedMap <K,V> Map <K,V> Returns a dynamically typesafe view of the specified map\.=Collection.checkedMap\(`Map <K,V> m^, `Class <K> keyType^, `Class <V> valueType^)
XSET $checkedSortedMap <K,V> SortedMap <K,V> Returns a dynamically typesafe view of the specified sorted map\.=Collection.checkedSortedMap\(`SortedMap <K,V> m^, `Class <K> keyType^, `Class <V> valueType^)
XSET $checkedNavigableMap <K,V> NavigableMap <K,V> Returns a dynamically typesafe view of the specified navigable map\.=Collection.checkedNavigableMap\(`NavigableMap <K,V> m^, `Class <K> keyType^, `Class <V> valueType^)
XSET $emptyIterator <T> Iterator <T> Returns an iterator that has no elements\.  More precisely, hasNext always returns false \. next always throws NoSuchElementException \. remove always throws IllegalStateException \.=Collection.emptyIterator\()
XSET $emptyListIterator <T> ListIterator <T> =Collection.emptyListIterator\()
XSET $emptyEnumeration <T> Enumeration <T> =Collection.emptyEnumeration\()
XSET $emptySet final <T> Set <T> =Collection.emptySet\()
XSET $emptySortedSet <E> SortedSet <E> =Collection.emptySortedSet\()
XSET $emptyNavigableSet <E> NavigableSet <E> =Collection.emptyNavigableSet\()
XSET $emptyList final <T> List <T> =Collection.emptyList\()
XSET $emptyMap final <K,V> Map <K,V> =Collection.emptyMap\()
XSET $emptySortedMap final <K,V> SortedMap <K,V> =Collection.emptySortedMap\()
XSET $emptyNavigableMap final <K,V> NavigableMap <K,V> =Collection.emptyNavigableMap\()
XSET $singleton <T> Set <T> Returns an immutable set containing only the specified object\.=Collection.singleton\(`T o^)
XSET $singletonMap <K,V> Map <K,V> Returns an immutable map, mapping only the specified key to the specified value\.=Collection.singletonMap\(`K key^, `V value^)
XSET $nCopies <T> List <T> Returns an immutable list consisting of n copies of the specified object\.=Collection.nCopies\(`int n^, `T o^)
XSET $reverseOrder <T> Comparator <T> Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface\.=Collection.reverseOrder\()
XSET $reverseOrder <T> Comparator <T> Returns a comparator that imposes the reverse ordering of the specified comparator\.=Collection.reverseOrder\(`Comparator <T> cmp^)
XSET $enumeration <T> Enumeration <T> Returns an enumeration over the specified collection\.=Collection.enumeration\(`Collection <T> c^)
XSET $list <T> ArrayList <T> Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration\.=Collection.list\(`Enumeration <T> e^)
XSET $frequency int Returns the number of elements in the specified collection equal to the specified object\.=Collection.frequency\( Collection <?> c, Object o)
XSET $disjoint boolean Returns true if the two specified collections have no elements in common\.=Collection.disjoint\(`Collection <?> c1^, `Collection <?> c2^)
XSET $addAll @SafeVarargs <T> boolean Adds all of the specified elements to the specified collection\.=Collection.addAll\(`Collection <? super T> c^, `T\.\.\. elements^)
XSET $newSetFromMap <E> Set <E> Returns a set backed by the specified map\.  The resulting set displays the same ordering, concurrency, and performance characteristics as the backing map\.=Collection.newSetFromMap\(`Map <E, Boolean > map^)
XSET $asLifoQueue <T> Queue <T> Returns a view of a Deque as a Last-in-first-out (Lifo) Queue \.=Collection.asLifoQueue\(`Deque <T> deque^)

XPT AbstractCollection alias=Collection
XSET $AbstractCollection=AbstractCollection\()
XSET $iterator Iterator < E > Returns an iterator over the elements contained in this collection\.=iterator\()
XSET $size int Returns: the number of elements in this collection=size\()
XSET $isEmpty boolean Returns true if this collection contains no elements\.=isEmpty\()
XSET $contains boolean Returns true if this collection contains the specified element\.=contains\(`Object o^)
XSET $toArray Object [] Returns an array containing all of the elements in this collection\.=toArray\()
XSET $toArray <T> T[] Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array\.=toArray\(`T[] a^)
XSET $add boolean Ensures that this collection contains the specified element (optional operation)\.  Returns true if this collection changed as a result of the call\.  (Returns false if this collection does not permit duplicates and already contains the specified element\.)=add\(`E e^)
XSET $remove boolean Removes a single instance of the specified element from this collection, if it is present (optional operation)\.Returns true if this collection contained the specified element=remove\(`Object o^)
XSET $containsAll boolean Returns true if this collection contains all of the elements in the specified collection\.=containsAll\(`Collection <?> c^)
XSET $addAll boolean Adds all of the elements in the specified collection to this collection (optional operation)\.=addAll\(`Collection <? extends E > c^)
XSET $removeAll boolean Removes all of this collection's elements that are also contained in the specified collection (optional operation)\.=removeAll\(`Collection <?> c^)
XSET $retainAll boolean Retains only the elements in this collection that are contained in the specified collection (optional operation)\.=retainAll\(`Collection <?> c^)
XSET $clear void Removes all of the elements from this collection (optional operation)\.=clear\()
XSET $toString String=toString\()

XPT AbstractList alias=AbstractCollection
XSET $modCount int The number of times this list has been structurally modified \.=modCount
XSET $AbstractList =AbstractList\()
XSET $get E Returns the element at the specified position in this list\.=get\(`int index^)
XSET $set E Replaces the element at the specified position in this list with the specified element (optional operation)\.=set\(`int index^, `E element^)
XSET $add void Inserts the specified element at the specified position in this list (optional operation)\.=add\(`int index^, `E element^)
XSET $remove E Removes the element at the specified position in this list (optional operation)\.=remove\(`int index^)
XSET $indexOf int Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element\.=indexOf\(`Object o^)
XSET $lastIndexOf int Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element\.=lastIndexOf\(`Object o^)
XSET $addAll boolean Inserts all of the elements in the specified collection into this list at the specified position (optional operation)\.=addAll\(`int index^, `Collection <? extends E > c^)
XSET $listIterator ListIterator < E > Returns a list iterator over the elements in this list (in proper sequence)\.=listIterator\()
XSET $listIterator ListIterator < E > Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list\.=listIterator\(`int index^)
XSET $subList List < E > Returns a view of the portion of this list between the specified fromIndex , inclusive, and toIndex , exclusive\.=subList\(`int fromIndex^, `int toIndex^)
XSET $equals boolean =equals\(`Object o^)
XSET $hashCode int =hashCode\()
XSET $removeRange void Removes from this list all of the elements whose index is between fromIndex , inclusive, and toIndex , exclusive\.=removeRange\(`int fromIndex^, `int toIndex^)

XPT Vector alias=AbstractList
XSET $elementData Object [] The array buffer into which the components of the vector are stored\. The capacity of the vector is the length of this array buffer, and is at least large enough to contain all the vector's elements\.=elementData
XSET $elementCount int The number of valid components in this Vector object\. Components elementData[0] through elementData[elementCount-1] are the actual items\.=elementCount
XSET $capacityIncrement int The amount by which the capacity of the vector is automatically incremented when its size becomes greater than its capacity\.=capacityIncrement
XSET $Vector Constructs an empty vector with the specified initial capacity and capacity increment\.=Vector\(`int initialCapacity^, `int capacityIncrement^)
XSET $Vector Constructs an empty vector with the specified initial capacity and with its capacity increment equal to zero\.=Vector\(`int initialCapacity^)
XSET $Vector Constructs an empty vector so that its internal data array has size 10 and its standard capacity increment is zero\.=Vector\()
XSET $Vector Constructs a vector containing the elements of the specified collection, in the order they are returned by the collection's iterator\.=Vector\(`Collection <? extends E > c^)
XSET $copyInto void Copies the components of this vector into the specified array\. The item at index k in this vector is copied into component k of anArray \.=copyInto\(`Object [] anArray^)
XSET $trimToSize void Trims the capacity of this vector to be the vector's current size\.=trimToSize\()
XSET $ensureCapacity void Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument\.=ensureCapacity\(`int minCapacity^)
XSET $setSize void Sets the size of this vector\. If the new size is greater than the current size, new null items are added to the end of the vector\.=setSize\(`int newSize^)
XSET $capacity int Returns the current capacity of this vector\.=capacity\()
XSET $elements Enumeration < E > Returns an enumeration of the components of this vector\. The returned Enumeration object will generate all items in this vector\.=elements\()
XSET $indexOf int Returns the index of the first occurrence of the specified element in this vector, searching forwards from index , or returns -1 if the element is not found\.=indexOf\(`Object o^, `int index^)
XSET $lastIndexOf int Returns the index of the last occurrence of the specified element in this vector, searching backwards from index , or returns -1 if the element is not found\.=lastIndexOf\(`Object o^, `int index^)
XSET $elementAt E Returns the component at the specified index\. This method is identical in functionality to the get(int) method (which is part of the List interface)\.=elementAt\(`int index^)
XSET $firstElement E Returns the first component (the item at index 0 ) of this vector\.=firstElement\()
XSET $lastElement E Returns the last component of the vector\.=lastElement\()
XSET $setElementAt void Sets the component at the specified index of this vector to be the specified object\.=setElementAt\(`E obj^, `int index^)
XSET $removeElementAt void Deletes the component at the specified index\.=removeElementAt\(`int index^)
XSET $insertElementAt void Inserts the specified object as a component in this vector at the specified index \.=insertElementAt\(`E obj^, `int index^)
XSET $addElement void Adds the specified component to the end of this vector, increasing its size by one\.=addElement\(`E obj^)
XSET $removeElement boolean Removes the first (lowest-indexed) occurrence of the argument from this vector\.=removeElement\(`Object obj^)
XSET $removeAllElements void Removes all components from this vector and sets its size to zero\. This method is identical in functionality to the clear() method (which is part of the List interface)\.=removeAllElements\()
XSET $clone Object =clone\()

XPT Enumeration alias=_chooseXSET
XSET $hasMoreElements boolean Tests if this enumeration contains more elements\.=hasMoreElements\()
XSET $nextElement E Returns the next element of this enumeration if this enumeration object has at least one more element to provide\.=nextElement\()

XPT BitSet alias=_chooseXSET
XSET $BitSet Creates a new bit set\. All bits are initially false \.=BitSet\()
XSET $BitSet Creates a bit set whose initial size is large enough to explicitly represent bits with indices in the range 0 through nbits-1 \. All bits are initially false \.=BitSet\(`int nbits^)
XSET $valueOf BitSet Returns a new bit set containing all the bits in the given long array\.=Bitset.valueOf\(`long[] longs^)
XSET $valueOf BitSet Returns a new bit set containing all the bits in the given long buffer between its position and limit\.=BitSet.valueOf\(`LongBuffer lb^)
XSET $valueOf BitSet Returns a new bit set containing all the bits in the given byte array\.=BitSet.valueOf\(`byte[] bytes^)
XSET $valueOf BitSet Returns a new bit set containing all the bits in the given byte buffer between its position and limit\.=BitSet.valueOf\(`ByteBuffer bb^)
XSET $toByteArray byte[] Returns a new byte array containing all the bits in this bit set\.=toByteArray\()
XSET $toLongArray long[] Returns a new long array containing all the bits in this bit set\.=toLongArray\()
XSET $flip void Sets the bit at the specified index to the complement of its current value\.=flip\(`int bitIndex^)
XSET $flip void Sets each bit from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the complement of its current value\.=flip\(`int fromIndex^, `int toIndex^)
XSET $set void Sets the bit at the specified index to true OR specified value\.=set\(`int bitIndex^`, `boolean value?^)
XSET $set void Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to true OR specified Value\.=set\(`int fromIndex^, `int toIndex^`, `boolean value?^)
XSET $clear void Sets all the bits OR the bit specified by the index to false \.=clear\(`int bitIndex?^)
XSET $clear void Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to false \.=clear\(`int fromIndex^, `int toIndex^)
XSET $get boolean Returns the value of the bit with the specified index\.=get\(`int bitIndex^)
XSET $get BitSet Returns a new BitSet composed of bits from this BitSet from fromIndex (inclusive) to toIndex (exclusive)\.=get\(`int fromIndex^, `int toIndex^)
XSET $nextSetBit int Returns the index of the first bit that is set to true that occurs on or after the specified starting index\. If no such bit exists then -1 is returned\.=nextSetBit\(`int fromIndex^)
XSET $nextClearBit int Returns the index of the first bit that is set to false that occurs on or after the specified starting index\.=nextClearBit\(`int fromIndex^)
XSET $previousSetBit int Returns the index of the nearest bit that is set to true that occurs on or before the specified starting index\.=previousSetBit\(`int fromIndex^)
XSET $previousClearBit int Returns the index of the nearest bit that is set to false that occurs on or before the specified starting index\.=previousClearBit\(`int fromIndex^)
XSET $length int Returns the "logical size" of this BitSet=length\()
XSET $isEmpty boolean =isEmpty\()
XSET $intersects boolean Returns true if the specified BitSet has any bits set to true that are also set to true in this BitSet \.=intersects\(`BitSet set^)
XSET $cardinality int Returns the number of bits set to true in this BitSet \.=cardinality\()
XSET $and void Performs a logical AND of this target bit set with the argument bit set\. This bit set is modified so that each bit in it has the value true if and only if it both initially had the value true and the corresponding bit in the bit set argument also had the value true \.=and\(`BitSet set^)
XSET $or void Performs a logical OR of this bit set with the bit set argument\. This bit set is modified so that a bit in it has the value true if and only if it either already had the value true or the corresponding bit in the bit set argument has the value true \.=or\(`BitSet set^)
XSET $xor void erforms a logical XOR of this bit set with the bit set argument\.=xor\(`BitSet set^)
XSET $andNot void Clears all of the bits in this BitSet whose corresponding bit is set in the specified BitSet \.=andNot\(`BitSet set^)
XSET $hashCode int =hashCode\()
XSET $size int Returns the number of bits of space actually in use by this BitSet to represent bit values\. The maximum element in the set is the size - 1st element\.=size\()
XSET $equals boolean =equals\(`Object obj^)
XSET $clone Object =clone\()
XSET $toString String =toString\()
XSET $stream IntStream Returns a stream of indices for which this BitSet contains a bit in the set state\. The indices are returned in order, from lowest to highest\.=stream\()

XPT Stack alias=Vector
XSET $Stack Creates an empty Stack\.=Stack\()
XSET $push E Pushes an item onto the top of this stack\. This has exactly the same effect as: addElement(item)=push\(`E item^)
XSET $pop E Removes the object at the top of this stack and returns that object as the value of this function\.=pop\()
XSET $peek E Looks at the object at the top of this stack without removing it from the stack\.=peek\()
XSET $empty Tests if this stack is empty\.=boolean empty\()
XSET $ int Returns the 1-based position where an object is on this stack\. If the object o occurs as an item in this stack, this method returns the distance from the top of the stack of the occurrence nearest the top of the stack; the topmost item on the stack is considered to be at distance 1 \.=search\(`Object o^)

XPT Dictionary alias=_chooseXSET
XSET $Dictionary=Dictionary\() 
XSET $size int Returns the number of entries (distinct keys) in this dictionary\.=size\()
XSET $isEmpty boolean Tests if this dictionary maps no keys to value\.=isEmpty\()
XSET $keys Enumeration < K > Returns an enumeration of the keys in this dictionary\.=keys\()
XSET $elements Enumeration < V > Returns an enumeration of the values in this dictionary\.=elements\()
XSET $get V Returns the value to which the key is mapped in this dictionary\.=get\(`Object key^)
XSET $put V Maps the specified key to the specified value in this dictionary\. Neither the key nor the value can be null \. If this dictionary already contains an entry for the specified key , the value already in this dictionary for that key is returned, after modifying the entry to contain the new element\. If this dictionary does not already have an entry  for the specified key , an entry is created for the  specified key and value , and null is  returned\.=put\(`K key^, `V value^)
XSET $remove V Removes the key (and its corresponding value ) from this dictionary\.=remove\(`Object key^)

XPT Map alias=_chooseXSET
XSET $size int Returns the number of key-value mappings in this map\.=size\()
XSET $isEmpty boolean Returns true if this map contains no key-value mappings\.=isEmpty\()
XSET $containsKey boolean Returns true if this map contains a mapping for the specified key\.=containsKey\(`Object key^)
XSET $containsValue boolean Returns true if this map maps one or more keys to the specified value\.=containsValue\(`Object value^)
XSET $get V Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key\.=get\(`Object key^)
XSET $put V Associates the specified value with the specified key in this map (optional operation)\.  If the map previously contained a mapping for the key, the old value is replaced by the specified value\.=put\(`K key^, `V value^)
XSET $remove V Removes the mapping for a key from this map if it is present (optional operation)\.=remove\(`Object key^)
XSET $putAll void Copies all of the mappings from the specified map to this map (optional operation)\.=putAll\(`Map <? extends K^ ,`? extends V > m^)
XSET $clear void Removes all of the mappings from this map (optional operation)\.=clear\()
XSET $keySet Set < K > Returns a Set view of the keys contained in this map\. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa\.=keySet\()
XSET $values Collection < V > Returns a Collection view of the values contained in this map\. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa\.=values\()
XSET $entrySet Set < Map\.Entry < K , V >> Returns a Set view of the mappings contained in this map\. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa\.=entrySet\()
XSET $equals boolean =equals\(`Object o^)
XSET $hashCode int =hashCode\()
XSET $getOrDefault V Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key\.=getOrDefault\(`Object key^, `V defaultValue^)
XSET $forEach void Performs the given action for each entry in this map until all entries have been processed or the action throws an exception\.=forEach\(`BiConsumer <? super K ,? super V > action^)
XSET $replaceAll void Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception\.=replaceAll\(`BiFunction <? super K ,? super V ,? extends V > function^)
XSET $putIfAbsent V If the specified key is not already associated with a value (or is mapped to null ) associates it with the given value and returns null , else returns the current value\.=putIfAbsent\(`K key^, `V value^)
XSET $remove boolean Removes the entry for the specified key only if it is currently mapped to the specified value\.=remove\(`Object key^, `Object value^)
XSET $replace boolean Replaces the entry for the specified key only if currently mapped to the specified value\.=replace\(`K key^, `V oldValue^, `V newValue^)
XSET $replace V Replaces the entry for the specified key only if it is currently mapped to some value\.=replace\(`K key^, `V value^)
XSET $computeIfAbsent V If the specified key is not already associated with a value (or is mapped to null ), attempts to compute its value using the given mapping function and enters it into this map unless null \.=computeIfAbsent\(`K key^, `Function <? super K ,? extends V > mappingFunction^)
XSET $computeIfPresent V If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value\. If the function returns null , the mapping is removed\.=computeIfPresent\(`K key^, `BiFunction <? super K ,? super V ,? extends V > remappingFunction^)
XSET $compute V Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping)\.=compute\(`K key^, `BiFunction <? super K ,? super V ,? extends V > remappingFunction^)
XSET $merge V If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value\. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is null \.=merge\(`K key^, `V value^, `BiFunction <? super V ,? super V ,? extends V > remappingFunction^)
